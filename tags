!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APP	Makefile	/^APP = mazewar$/;"	m
APP_OBJS	Makefile	/^APP_OBJS   = toplevel.o display.o init.o winsys.o$/;"	m
ActionSlot	mazewar.h	/^typedef map<RatId, MW244BPacket> ActionSlot;$/;"	t
AllRats	mazewar.h	/^	std::map<RatIndexType, RatId> AllRats;$/;"	m	class:MazewarInstance
Array	fwk/Array.h	/^   Array() { zeroIfTrue( typename IsPod<T>::Value(), array_, sizeof( array_ )); }$/;"	f	class:Fwk::Array
Array	fwk/Array.h	/^class Array : public BaseRefCollection<T> {$/;"	c	namespace:Fwk
ArrayIterator	fwk/Array.h	/^   template< U32 N > ArrayIterator( Array<T,N,K> const & array, U32 start = 0 ) : $/;"	f	class:Fwk::ArrayIterator
ArrayIterator	fwk/Array.h	/^class ArrayIterator : public ArrayIteratorConst< T, K > {$/;"	c	namespace:Fwk
ArrayIteratorConst	fwk/Array.h	/^   template< U32 N > ArrayIteratorConst( Array< T, N, K > const & array, U32 start = 0 ) : $/;"	f	class:Fwk::ArrayIteratorConst
ArrayIteratorConst	fwk/Array.h	/^class ArrayIteratorConst : public BaseIteratorConst< T > {$/;"	c	namespace:Fwk
Attribute	fwk/PtrInterface.h	/^    enum Attribute {$/;"	g	class:Fwk::PtrInterface
AttributeId	fwk/BaseNotifiee.h	/^   enum AttributeId {$/;"	g	class:Fwk::RootNotifiee
AttributeNotSupportedException	Exception.h	/^  AttributeNotSupportedException(string info)$/;"	f	class:AttributeNotSupportedException
AttributeNotSupportedException	Exception.h	/^class AttributeNotSupportedException : public NoImplementationException {$/;"	c
AttributeNotSupportedException	fwk/Exception.h	/^   AttributeNotSupportedException( String what ) $/;"	f	class:Fwk::AttributeNotSupportedException
AttributeNotSupportedException	fwk/Exception.h	/^class AttributeNotSupportedException : public NoImplementationException {$/;"	c	namespace:Fwk
AuditException	fwk/Exception.h	/^   AuditException( String what ) : InternalException(what) {} $/;"	f	class:Fwk::AuditException
AuditException	fwk/Exception.h	/^class AuditException : public InternalException {$/;"	c	namespace:Fwk
BaseCollection	fwk/BaseCollection.h	/^class BaseCollection {$/;"	c	namespace:Fwk
BaseIteratorConst	fwk/BaseCollection.h	/^   BaseIteratorConst( const BaseCollection * col, T const * t ) :$/;"	f	class:Fwk::BaseIteratorConst
BaseIteratorConst	fwk/BaseCollection.h	/^class BaseIteratorConst : public BaseCollection::StrepIterator {$/;"	c	namespace:Fwk
BaseRefCollection	fwk/BaseCollection.h	/^class BaseRefCollection : public BaseCollection {$/;"	c	namespace:Fwk
BitCell	mazewar.h	/^typedef struct { unsigned short bits[16]; } BitCell;$/;"	t	typeref:struct:__anon5
BoolConversion	fwk/Array.h	/^      typedef typename BaseIteratorConst< T >::BoolConversion BoolConversion;$/;"	t	class:Fwk::Array::IteratorConst
BoolConversion	fwk/Array.h	/^   typedef typename BaseIteratorConst< T >::BoolConversion BoolConversion;$/;"	t	class:Fwk::ArrayIteratorConst
BoolConversion	fwk/BaseCollection.h	/^      struct BoolConversion { int x; }; \/\/ better than operator bool$/;"	s	class:Fwk::BaseCollection::StrepIterator
Bytes	fwk/Types.h	/^typedef U32 Bytes;$/;"	t	namespace:Fwk
CC	Makefile	/^CC         = \/usr\/bin\/g++$/;"	m
CFLAGS	Makefile	/^CFLAGS     = $(FLAGS) $/;"	m
CPPFLAGS	fwk/Makefile	/^CPPFLAGS = -I..$/;"	m
CXX	Makefile	/^CXX        = \/usr\/bin\/g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS   = $(FLAGS)$/;"	m
ClearRatPosition	display.cpp	/^void ClearRatPosition(RatIndexType ratIndex)$/;"	f
ClearScoreLine	winsys.cpp	/^void ClearScoreLine(RatIndexType rat) {$/;"	f
ClearView	winsys.cpp	/^void ClearView(void) {$/;"	f
ConstLlIterator	fwk/LinkedList.h	/^       ConstLlIterator( const LinkedList<T>* ll, const T * mem ) :$/;"	f	class:Fwk::LinkedList::ConstLlIterator
ConstLlIterator	fwk/LinkedList.h	/^    class ConstLlIterator : public BaseIteratorConst<TT> {$/;"	c	class:Fwk::LinkedList
ConvertIncoming	toplevel.cpp	/^void ConvertIncoming(MW244BPacket *p) {}$/;"	f
ConvertOutgoing	toplevel.cpp	/^void ConvertOutgoing(MW244BPacket *p) {}$/;"	f
DEFAULT_FONT	winsys.cpp	/^#define DEFAULT_FONT /;"	d	file:
DEFAULT_POSITION	winsys.cpp	/^#define DEFAULT_POSITION /;"	d	file:
DIterator	fwk/HashMap.h	/^      DIterator( Self * hm, T * t ) : DIteratorConst(hm, t) {}$/;"	f	class:Fwk::HashMap::DIterator
DIterator	fwk/HashMap.h	/^      DIterator( Self * hm, T * t, S32 bkt ) : DIteratorConst(hm, t, bkt) {}$/;"	f	class:Fwk::HashMap::DIterator
DIterator	fwk/HashMap.h	/^      DIterator() {}$/;"	f	class:Fwk::HashMap::DIterator
DIterator	fwk/HashMap.h	/^   class DIterator : public DIteratorConst {$/;"	c	class:Fwk::HashMap
DIteratorConst	fwk/HashMap.h	/^      DIteratorConst( Self const * hm, T const * t, S32 bkt=-1 ) : IteratorConstBase( hm, t, bkt ) {}$/;"	f	class:Fwk::HashMap::DIteratorConst
DIteratorConst	fwk/HashMap.h	/^      DIteratorConst() {} $/;"	f	class:Fwk::HashMap::DIteratorConst
DIteratorConst	fwk/HashMap.h	/^   class DIteratorConst : public IteratorConstBase {$/;"	c	class:Fwk::HashMap
DeadRatCursor	winsys.cpp	/^void DeadRatCursor(void) {$/;"	f
DerIterator	fwk/HashMap.h	/^      DerIterator( Self * hm, DT * t ) : DerIteratorConst<DT>(hm,t) {}$/;"	f	class:Fwk::HashMap::DerIterator
DerIterator	fwk/HashMap.h	/^      DerIterator( Self * hm, DT * t, S32 bkt ) : DerIteratorConst<DT>(hm,t,bkt) {}$/;"	f	class:Fwk::HashMap::DerIterator
DerIterator	fwk/HashMap.h	/^      DerIterator() {}$/;"	f	class:Fwk::HashMap::DerIterator
DerIterator	fwk/HashMap.h	/^   class DerIterator : public DerIteratorConst<DT> {$/;"	c	class:Fwk::HashMap
DerIteratorConst	fwk/HashMap.h	/^      DerIteratorConst( Self const * hm, DT const * t, S32 bkt=-1 ) : $/;"	f	class:Fwk::HashMap::DerIteratorConst
DerIteratorConst	fwk/HashMap.h	/^      DerIteratorConst() {}$/;"	f	class:Fwk::HashMap::DerIteratorConst
DerIteratorConst	fwk/HashMap.h	/^   class DerIteratorConst : public IteratorConstBase {$/;"	c	class:Fwk::HashMap
Direction	mazewar.h	/^  Direction(short num) : Ordinal<Direction, short>(num) {$/;"	f	class:Direction
Direction	mazewar.h	/^class Direction : public Ordinal<Direction, short> {$/;"	c
DisplayRatBitmap	winsys.cpp	/^void DisplayRatBitmap(int screenX, int screenY, int width, int height, int srcX,$/;"	f
DoViewUpdate	toplevel.cpp	/^void DoViewUpdate() {$/;"	f
DrawString	winsys.cpp	/^void DrawString(const char *msg, uint32_t length, uint32_t x, uint32_t y) {$/;"	f
DrawViewLine	winsys.cpp	/^void DrawViewLine(int x1, int y1, int x2, int y2) {$/;"	f
EAST	mazewar.h	/^#define EAST /;"	d
EMPTY	display.cpp	/^static BitCell EMPTY = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};$/;"	v	file:
EVENT	mazewar.h	/^#define EVENT /;"	d
EVENTACK	mazewar.h	/^#define EVENTACK /;"	d
EVENT_A	mazewar.h	/^#define EVENT_A /;"	d
EVENT_BAR	mazewar.h	/^#define EVENT_BAR /;"	d
EVENT_C	mazewar.h	/^#define EVENT_C /;"	d
EVENT_D	mazewar.h	/^#define EVENT_D /;"	d
EVENT_F	mazewar.h	/^#define EVENT_F /;"	d
EVENT_G	mazewar.h	/^#define EVENT_G /;"	d
EVENT_INT	mazewar.h	/^#define EVENT_INT /;"	d
EVENT_LEFT_D	mazewar.h	/^#define EVENT_LEFT_D /;"	d
EVENT_LEFT_U	mazewar.h	/^#define EVENT_LEFT_U /;"	d
EVENT_MIDDLE_D	mazewar.h	/^#define EVENT_MIDDLE_D /;"	d
EVENT_NETWORK	mazewar.h	/^#define EVENT_NETWORK /;"	d
EVENT_RIGHT_D	mazewar.h	/^#define EVENT_RIGHT_D /;"	d
EVENT_RIGHT_U	mazewar.h	/^#define EVENT_RIGHT_U /;"	d
EVENT_S	mazewar.h	/^#define EVENT_S /;"	d
EVENT_TIMEOUT	mazewar.h	/^#define EVENT_TIMEOUT /;"	d
EXCEPTION_H	Exception.h	/^#define EXCEPTION_H$/;"	d
EntityIdInUseException	fwk/Exception.h	/^   EntityIdInUseException( String what ) : InternalException(what) {} $/;"	f	class:Fwk::EntityIdInUseException
EntityIdInUseException	fwk/Exception.h	/^class EntityIdInUseException : public InternalException {$/;"	c	namespace:Fwk
EntityLogEntityException	fwk/Exception.h	/^   EntityLogEntityException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::EntityLogEntityException
EntityLogEntityException	fwk/Exception.h	/^class EntityLogEntityException : public Exception {$/;"	c	namespace:Fwk
EntityLogMsgLenException	fwk/Exception.h	/^   EntityLogMsgLenException( String what ) : InternalException(what) {} $/;"	f	class:Fwk::EntityLogMsgLenException
EntityLogMsgLenException	fwk/Exception.h	/^class EntityLogMsgLenException : public InternalException {$/;"	c	namespace:Fwk
EntityLogRecordException	fwk/Exception.h	/^   EntityLogRecordException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::EntityLogRecordException
EntityLogRecordException	fwk/Exception.h	/^class EntityLogRecordException : public Exception {$/;"	c	namespace:Fwk
EntityLogWriteToConstException	fwk/Exception.h	/^   EntityLogWriteToConstException( String what ) : InternalException(what) {} $/;"	f	class:Fwk::EntityLogWriteToConstException
EntityLogWriteToConstException	fwk/Exception.h	/^class EntityLogWriteToConstException : public InternalException {$/;"	c	namespace:Fwk
EntityNotDirException	fwk/Exception.h	/^   EntityNotDirException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::EntityNotDirException
EntityNotDirException	fwk/Exception.h	/^class EntityNotDirException : public Exception {$/;"	c	namespace:Fwk
EntityNotFoundException	Exception.h	/^  EntityNotFoundException(string info) : Exception(info){};$/;"	f	class:EntityNotFoundException
EntityNotFoundException	Exception.h	/^class EntityNotFoundException : public Exception {$/;"	c
EntityNotFoundException	fwk/Exception.h	/^   EntityNotFoundException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::EntityNotFoundException
EntityNotFoundException	fwk/Exception.h	/^class EntityNotFoundException : public Exception {$/;"	c	namespace:Fwk
ErrnoException	fwk/Exception.h	/^   ErrnoException( int error, String filename = "" ) $/;"	f	class:Fwk::ErrnoException
ErrnoException	fwk/Exception.h	/^class ErrnoException : public Exception {$/;"	c	namespace:Fwk
EventId	mazewar.h	/^	uint32_t EventId;$/;"	m	struct:event
Exception	Exception.h	/^  Exception(char const *str) : what_(str) {}$/;"	f	class:Exception
Exception	Exception.h	/^  Exception(string str) : what_(str) {}$/;"	f	class:Exception
Exception	Exception.h	/^class Exception {$/;"	c
Exception	fwk/Exception.h	/^   Exception( String str ) : what_(str) {}$/;"	f	class:Fwk::Exception
Exception	fwk/Exception.h	/^   Exception( char const * str ) : what_(str) {}$/;"	f	class:Fwk::Exception
Exception	fwk/Exception.h	/^class Exception {$/;"	c	namespace:Fwk
FALSE	mazewar.h	/^#define FALSE /;"	d
FLAGS	Makefile	/^FLAGS      = -g -Wall $(INC_DIRS)$/;"	m
FRONT	mazewar.h	/^#define FRONT /;"	d
FWK_ARRAY_H	fwk/Array.h	/^#define FWK_ARRAY_H$/;"	d
FWK_BASECOLLECTION_H	fwk/BaseCollection.h	/^#define FWK_BASECOLLECTION_H$/;"	d
FWK_BASENOTIFIEE_H	fwk/BaseNotifiee.h	/^#define FWK_BASENOTIFIEE_H$/;"	d
FWK_EXCEPTION_H	fwk/Exception.h	/^#define FWK_EXCEPTION_H$/;"	d
FWK_HASHMAP_H	fwk/HashMap.h	/^#define FWK_HASHMAP_H$/;"	d
FWK_LINKEDLIST_H	fwk/LinkedList.h	/^#define FWK_LINKEDLIST_H$/;"	d
FWK_LINKEDQUEUE_H	fwk/LinkedQueue.h	/^#define FWK_LINKEDQUEUE_H$/;"	d
FWK_LISTRAW_H	fwk/ListRaw.h	/^#define FWK_LISTRAW_H$/;"	d
FWK_NAMEDINTERFACE_H	fwk/NamedInterface.h	/^#define FWK_NAMEDINTERFACE_H$/;"	d
FWK_PTRINTERFACE_H	fwk/PtrInterface.h	/^#define FWK_PTRINTERFACE_H$/;"	d
FWK_PTR_H	fwk/Ptr.h	/^#define FWK_PTR_H$/;"	d
FWK_STRING_H	fwk/String.h	/^#define FWK_STRING_H$/;"	d
FWK_TYPETRAITS_H	fwk/TypeTraits.h	/^#define FWK_TYPETRAITS_H$/;"	d
False	fwk/TypeTraits.h	/^struct False { };$/;"	s	namespace:Fwk
FlipBitmaps	display.cpp	/^void FlipBitmaps() {$/;"	f
Fwk	fwk/Array.h	/^namespace Fwk {$/;"	n
Fwk	fwk/BaseCollection.h	/^namespace Fwk {$/;"	n
Fwk	fwk/BaseNotifiee.cpp	/^namespace Fwk {$/;"	n	file:
Fwk	fwk/BaseNotifiee.h	/^namespace Fwk {$/;"	n
Fwk	fwk/Exception.h	/^namespace Fwk {$/;"	n
Fwk	fwk/HashMap.h	/^namespace Fwk {$/;"	n
Fwk	fwk/LinkedList.h	/^namespace Fwk {$/;"	n
Fwk	fwk/LinkedQueue.h	/^namespace Fwk {$/;"	n
Fwk	fwk/ListRaw.h	/^namespace Fwk {$/;"	n
Fwk	fwk/NamedInterface.h	/^namespace Fwk {$/;"	n
Fwk	fwk/Ptr.h	/^namespace Fwk {$/;"	n
Fwk	fwk/PtrInterface.h	/^namespace Fwk {$/;"	n
Fwk	fwk/String.h	/^namespace Fwk {$/;"	n
Fwk	fwk/TypeTraits.h	/^namespace Fwk {$/;"	n
Fwk	fwk/Types.h	/^namespace Fwk {$/;"	n
GetRatName	toplevel.cpp	/^char *GetRatName(RatIndexType ratIndex) {$/;"	f
GetRatScore	toplevel.cpp	/^Score GetRatScore(RatIndexType ratIndex) {$/;"	f
HEARTBEAT	mazewar.h	/^#define HEARTBEAT /;"	d
HEARTBEATACK	mazewar.h	/^#define HEARTBEATACK /;"	d
HackMazeBitmap	winsys.cpp	/^void HackMazeBitmap(Loc x, Loc y, BitCell *newBits) {$/;"	f
HashMap	fwk/HashMap.h	/^   HashMap( U32 _buckets=bkts) : version_(1), members_(0) {$/;"	f	class:Fwk::HashMap
HashMap	fwk/HashMap.h	/^   HashMap( const Self & hm ) {$/;"	f	class:Fwk::HashMap
HashMap	fwk/HashMap.h	/^   HashMap( const char *, const char * ) : version_(0), members_(0),$/;"	f	class:Fwk::HashMap
HashMap	fwk/HashMap.h	/^class HashMap : public BaseRefCollection<T> {$/;"	c	namespace:Fwk
HourGlassCursor	winsys.cpp	/^void HourGlassCursor(void) {$/;"	f
ICON_FLASH_PERIOD	winsys.cpp	/^#define ICON_FLASH_PERIOD /;"	d	file:
INC_DIRS	Makefile	/^INC_DIRS   = -I. -I\/usr\/openwin\/include$/;"	m
Id	fwk/Exception.h	/^   enum Id { \/\/ Enum for remote designation$/;"	g	class:Fwk::Exception
IdInstance	fwk/Exception.cpp	/^Fwk::Exception::Id Fwk::Exception::IdInstance( U32 v ) {$/;"	f	class:Fwk::Exception
IllegalNameException	fwk/Exception.h	/^   IllegalNameException( String what ): Exception( what ) {}$/;"	f	class:Fwk::IllegalNameException
IllegalNameException	fwk/Exception.h	/^class IllegalNameException: public Exception {$/;"	c	namespace:Fwk
InitDisplay	display.cpp	/^void InitDisplay(int argc, char **argv) { InitWindow(argc, argv); }$/;"	f
InitWindow	winsys.cpp	/^void InitWindow(int argc, char **argv) {$/;"	f
InternalException	fwk/Exception.h	/^   InternalException( String what ) : Exception(what) {}$/;"	f	class:Fwk::InternalException
InternalException	fwk/Exception.h	/^class InternalException : public Exception {$/;"	c	namespace:Fwk
InvertScoreLine	winsys.cpp	/^void InvertScoreLine(RatIndexType rat) {$/;"	f
IsFloat	fwk/TypeTraits.h	/^template< typename T > struct IsFloat { typedef False Value; };$/;"	s	namespace:Fwk
IsFloat	fwk/TypeTraits.h	/^template<> struct IsFloat< double > { typedef True Value; };$/;"	s	namespace:Fwk
IsFloat	fwk/TypeTraits.h	/^template<> struct IsFloat< float > { typedef True Value; };$/;"	s	namespace:Fwk
IsFloat	fwk/TypeTraits.h	/^template<> struct IsFloat< long double > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template< typename T > struct IsInteger { typedef False Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< bool > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< signed char > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< signed int > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< signed long > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< signed long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< signed short > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned char > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned int > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned long > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsInteger	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned short > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template< typename T > struct IsPod { typedef False Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template< typename T > struct IsPod< T * > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< bool > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< double > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< float > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< long double > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< signed char > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< signed int > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< signed long > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< signed long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< signed short > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned char > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned int > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned long > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsPod	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned short > { typedef True Value; };$/;"	s	namespace:Fwk
IsPointer	fwk/TypeTraits.h	/^template< typename T > struct IsPointer { typedef False Value; };$/;"	s	namespace:Fwk
IsPointer	fwk/TypeTraits.h	/^template< typename T > struct IsPointer< T * > { typedef True Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template< typename T > struct IsSignedInteger { typedef False Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed char > { typedef True Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed int > { typedef True Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed long > { typedef True Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsSignedInteger	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed short > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template< typename T > struct IsUnsignedInteger { typedef False Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< bool > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned char > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned int > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned long > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned long long > { typedef True Value; };$/;"	s	namespace:Fwk
IsUnsignedInteger	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned short > { typedef True Value; };$/;"	s	namespace:Fwk
Istream	fwk/Types.h	/^typedef std::istream Istream;$/;"	t	namespace:Fwk
IstringStream	fwk/Types.h	/^typedef std::istringstream IstringStream;$/;"	t	namespace:Fwk
IterDeleter	fwk/HashMap.h	/^      struct IterDeleter {$/;"	s	class:Fwk::HashMap::DIterator
IterDeleter	fwk/HashMap.h	/^      struct IterDeleter {$/;"	s	class:Fwk::HashMap::DerIterator
IterDeleter	fwk/HashMap.h	/^      struct IterDeleter {$/;"	s	class:Fwk::HashMap::Iterator
IterDeleter	fwk/LinkedQueue.h	/^      struct IterDeleter {$/;"	s	class:Fwk::LinkedQueue::Iterator
IterDeleter	fwk/ListRaw.h	/^      struct IterDeleter {$/;"	s	class:Fwk::ListRaw::LrIterator
Iterator	fwk/Array.h	/^      Iterator( Array<T,N,K> const & array, U32 start = 0 ) : $/;"	f	class:Fwk::Array::Iterator
Iterator	fwk/Array.h	/^   class Iterator : public IteratorConst {$/;"	c	class:Fwk::Array
Iterator	fwk/HashMap.h	/^      Iterator( Self * hm, T * t ) : IteratorConst(hm, t) {}$/;"	f	class:Fwk::HashMap::Iterator
Iterator	fwk/HashMap.h	/^      Iterator( Self * hm, T * t, S32 bkt ) : IteratorConst(hm, t, bkt) {}$/;"	f	class:Fwk::HashMap::Iterator
Iterator	fwk/HashMap.h	/^      Iterator() {}$/;"	f	class:Fwk::HashMap::Iterator
Iterator	fwk/HashMap.h	/^   class Iterator : public IteratorConst {$/;"	c	class:Fwk::HashMap
Iterator	fwk/LinkedList.h	/^    typedef LlIterator<T> Iterator;$/;"	t	class:Fwk::LinkedList
Iterator	fwk/LinkedQueue.h	/^      Iterator( Self * lq, T * mem ) :$/;"	f	class:Fwk::LinkedQueue::Iterator
Iterator	fwk/LinkedQueue.h	/^      Iterator( const Self* lq, T * mem ) :$/;"	f	class:Fwk::LinkedQueue::Iterator
Iterator	fwk/LinkedQueue.h	/^   class Iterator : public IteratorConst {$/;"	c	class:Fwk::LinkedQueue
Iterator	fwk/ListRaw.h	/^    typedef LrIterator Iterator;$/;"	t	class:Fwk::ListRaw
IteratorConst	fwk/Array.h	/^      IteratorConst( Array< T, N, K > const & array, U32 start = 0 ) : $/;"	f	class:Fwk::Array::IteratorConst
IteratorConst	fwk/Array.h	/^   class IteratorConst : public BaseIteratorConst<T> {$/;"	c	class:Fwk::Array
IteratorConst	fwk/HashMap.h	/^      IteratorConst( Self const * hm, T const * t, S32 bkt=-1 ) : IteratorConstBase( hm, t, bkt ) {}$/;"	f	class:Fwk::HashMap::IteratorConst
IteratorConst	fwk/HashMap.h	/^      IteratorConst() {}$/;"	f	class:Fwk::HashMap::IteratorConst
IteratorConst	fwk/HashMap.h	/^   class IteratorConst : public IteratorConstBase {$/;"	c	class:Fwk::HashMap
IteratorConst	fwk/LinkedList.h	/^    typedef ConstLlIterator<T> IteratorConst;$/;"	t	class:Fwk::LinkedList
IteratorConst	fwk/LinkedQueue.h	/^      IteratorConst( Self * lq, T * mem ) :$/;"	f	class:Fwk::LinkedQueue::IteratorConst
IteratorConst	fwk/LinkedQueue.h	/^      IteratorConst( Self const * lq, T * mem ) :$/;"	f	class:Fwk::LinkedQueue::IteratorConst
IteratorConst	fwk/LinkedQueue.h	/^   class IteratorConst : public BaseIteratorConst<T> {$/;"	c	class:Fwk::LinkedQueue
IteratorConst	fwk/ListRaw.h	/^    typedef LrIteratorConst IteratorConst;$/;"	t	class:Fwk::ListRaw
IteratorConstBase	fwk/HashMap.h	/^      IteratorConstBase( Self const * hm, T const * t, S32 bkt = -1 ) :$/;"	f	class:Fwk::HashMap::IteratorConstBase
IteratorConstBase	fwk/HashMap.h	/^      IteratorConstBase() : BaseIteratorConst<T>( 0, 0 ) {$/;"	f	class:Fwk::HashMap::IteratorConstBase
IteratorConstBase	fwk/HashMap.h	/^   class IteratorConstBase : public BaseIteratorConst<T> {$/;"	c	class:Fwk::HashMap
JoinGame	toplevel.cpp	/^void JoinGame(){$/;"	f
KBEventPending	winsys.cpp	/^bool KBEventPending(void) { return (XPending(dpy) != 0); }$/;"	f
LEFT	mazewar.h	/^#define LEFT /;"	d
LIBRARIES	Makefile	/^LIBRARIES  = -lXt -lX11  -lnsl -lICE -lSM$/;"	m
LIB_DIRS	Makefile	/^LIB_DIRS   = -L. -L\/usr\/X11R6\/lib fwk\/BaseCollection.o fwk\/BaseNotifiee.o fwk\/Exception.o$/;"	m
LeftButton	winsys.cpp	/^#define LeftButton /;"	d	file:
LinkedList	fwk/LinkedList.h	/^    LinkedList( LinkedList<T> * ll ) : head_(ll->head()) {}$/;"	f	class:Fwk::LinkedList
LinkedList	fwk/LinkedList.h	/^    LinkedList() : version_(0),members_(0),head_(0),tail_(0) {}$/;"	f	class:Fwk::LinkedList
LinkedList	fwk/LinkedList.h	/^class LinkedList : public BaseRefCollection<T> {$/;"	c	namespace:Fwk
LinkedQueue	fwk/LinkedQueue.h	/^   LinkedQueue() : version_(0), members_(0),head_(0), tail_(0) {}$/;"	f	class:Fwk::LinkedQueue
LinkedQueue	fwk/LinkedQueue.h	/^class LinkedQueue : public BaseRefCollection<T> {$/;"	c	namespace:Fwk
ListException	fwk/Exception.h	/^   ListException( String what ) : RangeException(what) {} $/;"	f	class:Fwk::ListException
ListException	fwk/Exception.h	/^class ListException : public RangeException {$/;"	c	namespace:Fwk
ListRaw	fwk/ListRaw.h	/^    ListRaw() : version_(0), members_(0), head_(0), tail_(0) {}$/;"	f	class:Fwk::ListRaw
ListRaw	fwk/ListRaw.h	/^class ListRaw : public BaseRefCollection<T> {$/;"	c	namespace:Fwk
LlIterator	fwk/LinkedList.h	/^       LlIterator( LinkedList<T> * ll, T * mem ) :$/;"	f	class:Fwk::LinkedList::LlIterator
LlIterator	fwk/LinkedList.h	/^    class LlIterator : public ConstLlIterator<TT> {$/;"	c	class:Fwk::LinkedList
Loc	mazewar.h	/^  Loc(short num) : Ordinal<Loc, short>(num) {$/;"	f	class:Loc
Loc	mazewar.h	/^class Loc : public Ordinal<Loc, short> {$/;"	c
LrIterator	fwk/ListRaw.h	/^       LrIterator( ListRaw<T> * li, T * mem ) :$/;"	f	class:Fwk::ListRaw::LrIterator
LrIterator	fwk/ListRaw.h	/^       LrIterator( const ListRaw<T>* li, T * mem ) :$/;"	f	class:Fwk::ListRaw::LrIterator
LrIterator	fwk/ListRaw.h	/^    class LrIterator : public LrIteratorConst {$/;"	c	class:Fwk::ListRaw
LrIteratorConst	fwk/ListRaw.h	/^       LrIteratorConst( ListRaw<T> * lr, T * mem ) :$/;"	f	class:Fwk::ListRaw::LrIteratorConst
LrIteratorConst	fwk/ListRaw.h	/^       LrIteratorConst( const ListRaw<T> * lr, T * mem ) :$/;"	f	class:Fwk::ListRaw::LrIteratorConst
LrIteratorConst	fwk/ListRaw.h	/^   class LrIteratorConst : public BaseIteratorConst<T> {$/;"	c	class:Fwk::ListRaw
M	toplevel.cpp	/^MazewarInstance::Ptr M;$/;"	v
MAX_MISSILES	mazewar.h	/^#define MAX_MISSILES /;"	d
MAX_OTHER_RATS	toplevel.cpp	/^#define MAX_OTHER_RATS /;"	d	file:
MAX_RATS	mazewar.h	/^#define MAX_RATS /;"	d
MAZEGROUP	mazewar.h	/^#define MAZEGROUP /;"	d
MAZEPORT	mazewar.h	/^#define MAZEPORT /;"	d
MAZESERVICE	mazewar.h	/^#define MAZESERVICE /;"	d
MAZEWAR_H	mazewar.h	/^#define MAZEWAR_H$/;"	d
MAZEXMAX	mazewar.h	/^#define MAZEXMAX /;"	d
MAZEYMAX	mazewar.h	/^#define MAZEYMAX /;"	d
MAZE_X_DIM	winsys.cpp	/^#define MAZE_X_DIM /;"	d	file:
MAZE_X_ORIGIN	winsys.cpp	/^#define MAZE_X_ORIGIN /;"	d	file:
MAZE_Y_DIM	winsys.cpp	/^#define MAZE_Y_DIM /;"	d	file:
MAZE_Y_ORIGIN	winsys.cpp	/^#define MAZE_Y_ORIGIN /;"	d	file:
MIN_X_DIM	winsys.cpp	/^#define MIN_X_DIM /;"	d	file:
MIN_Y_DIM	winsys.cpp	/^#define MIN_Y_DIM /;"	d	file:
MW244BPacket	mazewar.h	/^} MW244BPacket;$/;"	t	typeref:struct:__anon6
MWError	toplevel.cpp	/^void MWError(char *s)$/;"	f
MWEvent	mazewar.h	/^} MWEvent;$/;"	t	typeref:struct:__anon7
MY_DIR	mazewar.h	/^#define MY_DIR /;"	d
MY_RAT_INDEX	mazewar.h	/^#define MY_RAT_INDEX /;"	d
MY_X_LOC	mazewar.h	/^#define MY_X_LOC /;"	d
MY_Y_LOC	mazewar.h	/^#define MY_Y_LOC /;"	d
MazeInit	init.cpp	/^void MazeInit(int argc, char **argv) {$/;"	f
MazeRow	mazewar.h	/^typedef bool MazeRow[MAZEYMAX];$/;"	t
MazeType	mazewar.h	/^typedef MazeRow MazeType[MAZEXMAX];$/;"	t
MazeTypePtr	mazewar.h	/^typedef MazeRow *MazeTypePtr;$/;"	t
MazewarInstance	mazewar.h	/^  MazewarInstance(string s)$/;"	f	class:MazewarInstance
MazewarInstance	mazewar.h	/^class MazewarInstance : public Fwk::NamedInterface {$/;"	c
MemberType	fwk/HashMap.h	/^   typedef T MemberType;$/;"	t	class:Fwk::HashMap
MemberType	fwk/LinkedList.h	/^    typedef T MemberType;$/;"	t	class:Fwk::LinkedList
MemoryException	fwk/Exception.h	/^   MemoryException( String what ) : Exception(what) {} $/;"	f	class:Fwk::MemoryException
MemoryException	fwk/Exception.h	/^class MemoryException : public Exception {$/;"	c	namespace:Fwk
MemoryLimitExceededException	fwk/Exception.h	/^   MemoryLimitExceededException(String what) : MemoryException(what) {}$/;"	f	class:Fwk::MemoryLimitExceededException
MemoryLimitExceededException	fwk/Exception.h	/^class MemoryLimitExceededException : public MemoryException {$/;"	c	namespace:Fwk
MiddleButton	winsys.cpp	/^#define MiddleButton /;"	d	file:
Missile	mazewar.h	/^								Missile() : exist(false), x(0), y(0), dir(NORTH) {};$/;"	f	struct:Missile
Missile	mazewar.h	/^struct Missile{$/;"	s
MountException	fwk/Exception.h	/^   MountException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::MountException
MountException	fwk/Exception.h	/^class MountException : public Exception {$/;"	c	namespace:Fwk
NAMESIZE	mazewar.h	/^#define NAMESIZE /;"	d
NDIR	display.cpp	/^#define NDIR /;"	d	file:
NDIR	display.cpp	/^#undef NDIR$/;"	d	file:
NDIRECTION	mazewar.h	/^#define NDIRECTION /;"	d
NORTH	mazewar.h	/^#define NORTH /;"	d
NVIEW	mazewar.h	/^#define NVIEW /;"	d
Name	mazewar.h	/^	RatName Name;$/;"	m	class:Rat
NameInUseException	Exception.h	/^  NameInUseException(string info) : Exception(info){};$/;"	f	class:NameInUseException
NameInUseException	Exception.h	/^class NameInUseException : public Exception {$/;"	c
NameInUseException	fwk/Exception.h	/^   NameInUseException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::NameInUseException
NameInUseException	fwk/Exception.h	/^class NameInUseException : public Exception {$/;"	c	namespace:Fwk
NamedInterface	fwk/NamedInterface.h	/^	NamedInterface(const String& name) : name_(name) { }$/;"	f	class:Fwk::NamedInterface
NamedInterface	fwk/NamedInterface.h	/^class NamedInterface : public PtrInterface<NamedInterface>$/;"	c	namespace:Fwk
NewPosition	toplevel.cpp	/^void NewPosition(MazewarInstance::Ptr m) {$/;"	f
NewScoreCard	display.cpp	/^void NewScoreCard() {$/;"	f
NextEvent	winsys.cpp	/^void NextEvent(MWEvent *event, int socket) {$/;"	f
NoImplementationException	Exception.h	/^  NoImplementationException(string info) : Exception(info){};$/;"	f	class:NoImplementationException
NoImplementationException	Exception.h	/^class NoImplementationException : public Exception {$/;"	c
NoImplementationException	fwk/Exception.h	/^   NoImplementationException( String what \/*, bool debug=true *\/ ) : Exception( what \/*, debug *\/ ) {} $/;"	f	class:Fwk::NoImplementationException
NoImplementationException	fwk/Exception.h	/^class NoImplementationException : public Exception {$/;"	c	namespace:Fwk
NoParentException	fwk/Exception.h	/^   NoParentException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::NoParentException
NoParentException	fwk/Exception.h	/^class NoParentException : public Exception {$/;"	c	namespace:Fwk
Nominal	Nominal.h	/^  Nominal(RepType v) : value_(v) {}$/;"	f	class:Nominal
Nominal	Nominal.h	/^template <class UnitType, class RepType> class Nominal {$/;"	c
Notifiee	fwk/NamedInterface.h	/^	class Notifiee : virtual public NotifieeConst {$/;"	c	class:Fwk::NamedInterface
NotifieeConst	fwk/NamedInterface.h	/^	class NotifieeConst : virtual public RootNotifiee {$/;"	c	class:Fwk::NamedInterface
NotifyPlayer	winsys.cpp	/^void NotifyPlayer(void) { flashIcon = TRUE; }$/;"	f
OBJECTS	fwk/Makefile	/^OBJECTS = BaseCollection.o BaseNotifiee.o Exception.o$/;"	m
Ordinal	Nominal.h	/^  Ordinal(RepType v) : Nominal<UnitType, RepType>(v) {}$/;"	f	class:Ordinal
Ordinal	Nominal.h	/^class Ordinal : public Nominal<UnitType, RepType> {$/;"	c
Ostream	fwk/Types.h	/^typedef std::ostream Ostream;$/;"	t	namespace:Fwk
OstringStream	fwk/Types.h	/^typedef std::ostringstream OstringStream;$/;"	t	namespace:Fwk
PermissionException	Exception.h	/^  PermissionException(string info) : Exception(info){};$/;"	f	class:PermissionException
PermissionException	Exception.h	/^class PermissionException : public Exception {$/;"	c
PermissionException	fwk/Exception.h	/^   PermissionException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::PermissionException
PermissionException	fwk/Exception.h	/^class PermissionException : public Exception {$/;"	c	namespace:Fwk
PointerConversion	fwk/LinkedQueue.h	/^      struct PointerConversion {$/;"	s	class:Fwk::LinkedQueue::Iterator
Ptr	fwk/BaseNotifiee.h	/^   typedef Fwk::Ptr<RootNotifiee> Ptr;$/;"	t	class:Fwk::RootNotifiee
Ptr	fwk/NamedInterface.h	/^		typedef Fwk::Ptr<Notifiee> Ptr;$/;"	t	class:Fwk::NamedInterface::Notifiee
Ptr	fwk/NamedInterface.h	/^		typedef Fwk::Ptr<NotifieeConst> Ptr;$/;"	t	class:Fwk::NamedInterface::NotifieeConst
Ptr	fwk/Ptr.h	/^Ptr<T>::Ptr( T * ptr  ) : value_(ptr) {$/;"	f	class:Fwk::Ptr
Ptr	fwk/Ptr.h	/^Ptr<T>::Ptr( const Ptr<T>& mp ) : value_(mp.value_) {$/;"	f	class:Fwk::Ptr
Ptr	fwk/Ptr.h	/^class Ptr {$/;"	c	namespace:Fwk
Ptr	mazewar.h	/^  typedef Fwk::Ptr<MazewarInstance> Ptr;$/;"	t	class:MazewarInstance
PtrConst	fwk/BaseNotifiee.h	/^   typedef Fwk::Ptr<RootNotifiee const> PtrConst;$/;"	t	class:Fwk::RootNotifiee
PtrConst	fwk/NamedInterface.h	/^		typedef Fwk::Ptr<Notifiee const> PtrConst;$/;"	t	class:Fwk::NamedInterface::Notifiee
PtrConst	fwk/NamedInterface.h	/^		typedef Fwk::Ptr<NotifieeConst const> PtrConst;$/;"	t	class:Fwk::NamedInterface::NotifieeConst
PtrConst	mazewar.h	/^  typedef Fwk::Ptr<MazewarInstance const> PtrConst;$/;"	t	class:MazewarInstance
PtrInterface	fwk/PtrInterface.h	/^    PtrInterface() : ref_(1) {}$/;"	f	class:Fwk::PtrInterface
PtrInterface	fwk/PtrInterface.h	/^class PtrInterface {$/;"	c	namespace:Fwk
REAR	mazewar.h	/^#define REAR /;"	d
RIGHT	mazewar.h	/^#define RIGHT /;"	d
RM	Makefile	/^RM         = \/bin\/rm$/;"	m
RandomEvent	winsys.cpp	/^static short RandomEvent(void) {$/;"	f	file:
RangeException	Exception.h	/^  RangeException(string info) : Exception(info){};$/;"	f	class:RangeException
RangeException	Exception.h	/^class RangeException : public Exception {$/;"	c
RangeException	fwk/Exception.h	/^   RangeException( String what ) : Exception(what) {} $/;"	f	class:Fwk::RangeException
RangeException	fwk/Exception.h	/^class RangeException : public Exception {$/;"	c	namespace:Fwk
Rat	mazewar.h	/^  Rat() : playing(0), cloaked(0), x(1), y(1), score(0), dir(NORTH){$/;"	f	class:Rat
Rat	mazewar.h	/^class Rat {$/;"	c
RatApp_type	mazewar.h	/^typedef RatAppearance RatApp_type[MAX_RATS];$/;"	t
RatAppearance	mazewar.h	/^  RatAppearance() : x(1), y(1), tokenId(0){};$/;"	f	class:RatAppearance
RatAppearance	mazewar.h	/^class RatAppearance {$/;"	c
RatCursor	winsys.cpp	/^void RatCursor(void) {$/;"	f
RatId	mazewar.h	/^  RatId(unsigned int num) : Ordinal<RatId, unsigned int>(num) {}$/;"	f	class:RatId
RatId	mazewar.h	/^class RatId : public Ordinal<RatId, unsigned int> {$/;"	c
RatIndexType	mazewar.h	/^  RatIndexType(int num) : Ordinal<RatIndexType, int>(num) {$/;"	f	class:RatIndexType
RatIndexType	mazewar.h	/^class RatIndexType : public Ordinal<RatIndexType, int> {$/;"	c
RatLook	mazewar.h	/^typedef RatAppearance *RatLook;$/;"	t
RatMissile	mazewar.h	/^	Missile* RatMissile[MAX_MISSILES];$/;"	m	class:Rat
RatName	mazewar.h	/^typedef char RatName[NAMESIZE];$/;"	t
Rats2Display	display.h	/^RatApp_type Rats2Display;$/;"	v
RightButton	winsys.cpp	/^#define RightButton /;"	d	file:
RootNotifiee	fwk/BaseNotifiee.h	/^   RootNotifiee(): notificationAttribute_($/;"	f	class:Fwk::RootNotifiee
RootNotifiee	fwk/BaseNotifiee.h	/^class RootNotifiee : public Fwk::PtrInterface<RootNotifiee> {$/;"	c	namespace:Fwk
RpcConnectionException	fwk/Exception.h	/^   RpcConnectionException( String what ) : RpcException( what ) {} $/;"	f	class:Fwk::RpcConnectionException
RpcConnectionException	fwk/Exception.h	/^class RpcConnectionException : public RpcException {$/;"	c	namespace:Fwk
RpcException	fwk/Exception.h	/^   RpcException( String what ) : Exception( what ) {} $/;"	f	class:Fwk::RpcException
RpcException	fwk/Exception.h	/^class RpcException : public Exception {$/;"	c	namespace:Fwk
S32	fwk/Types.h	/^typedef long S32;$/;"	t
SCORE_X_DIM	winsys.cpp	/^#define SCORE_X_DIM /;"	d	file:
SCORE_X_ORIGIN	winsys.cpp	/^#define SCORE_X_ORIGIN /;"	d	file:
SCORE_Y_DIM	winsys.cpp	/^#define SCORE_Y_DIM /;"	d	file:
SCORE_Y_ORIGIN	winsys.cpp	/^#define SCORE_Y_ORIGIN /;"	d	file:
SED	Makefile	/^SED        = sed$/;"	m
SH	Makefile	/^SH         = \/bin\/sh$/;"	m
SIACK	mazewar.h	/^#define SIACK /;"	d
SIACK	mazewar.h	/^struct SIACK{$/;"	s
SIACK_	mazewar.h	/^				SIACK SIACK_;$/;"	m	union:__anon8
SIREQ	mazewar.h	/^#define SIREQ /;"	d
SIRES	mazewar.h	/^#define SIRES /;"	d
SIReq_	mazewar.h	/^				SIReq SIReq_;$/;"	m	union:__anon8
SIRes_	mazewar.h	/^				SIRes SIRes_;$/;"	m	union:__anon8
SOUTH	mazewar.h	/^#define SOUTH /;"	d
Score	mazewar.h	/^  Score(int num) : Ordinal<Score, int>(num) {}$/;"	f	class:Score
Score	mazewar.h	/^class Score : public Ordinal<Score, int> {$/;"	c
Seconds	fwk/Types.h	/^typedef double Seconds;$/;"	t	namespace:Fwk
Self	fwk/HashMap.h	/^   typedef HashMap<T,Key,P,Vconst,V,bkts,K,hash> Self;$/;"	t	class:Fwk::HashMap
Self	fwk/LinkedQueue.h	/^   typedef LinkedQueue< T, P, V > Self;$/;"	t	class:Fwk::LinkedQueue
SetMyRatIndexType	display.cpp	/^void SetMyRatIndexType(RatIndexType ratIndex) {$/;"	f
SetRatPosition	display.cpp	/^void SetRatPosition(RatIndexType ratIndex, Loc x_loc, Loc y_loc,$/;"	f
ShowAllPositions	display.cpp	/^void ShowAllPositions() {$/;"	f
ShowPosition	display.cpp	/^void ShowPosition(Loc x_loc, Loc y_loc, Direction tdir) {$/;"	f
ShowView	display.cpp	/^void ShowView(Loc x, Loc y, Direction dir) {$/;"	f
Sockaddr	mazewar.h	/^typedef struct sockaddr_in Sockaddr;$/;"	t	typeref:struct:sockaddr_in
StartDisplay	display.cpp	/^void StartDisplay() { StartWindow(ratBits_width, ratBits_height); }$/;"	f
StartWindow	winsys.cpp	/^void StartWindow(int ratWidth, int ratHeight) {$/;"	f
StopWindow	winsys.cpp	/^void StopWindow(void) {}$/;"	f
StorageException	fwk/Exception.h	/^   StorageException( String what ) : Exception(what) {} $/;"	f	class:Fwk::StorageException
StorageException	fwk/Exception.h	/^class StorageException : public Exception {$/;"	c	namespace:Fwk
StrepIterator	fwk/Array.h	/^   typedef BaseCollection::StrepIterator StrepIterator;$/;"	t	class:Fwk::Array
StrepIterator	fwk/BaseCollection.h	/^      StrepIterator( BaseCollection const * col, void const * space ) :$/;"	f	class:Fwk::BaseCollection::StrepIterator
StrepIterator	fwk/BaseCollection.h	/^      StrepIterator( StrepIterator const & other ) :$/;"	f	class:Fwk::BaseCollection::StrepIterator
StrepIterator	fwk/BaseCollection.h	/^      StrepIterator() : collection_(0), space_(0) { }$/;"	f	class:Fwk::BaseCollection::StrepIterator
StrepIterator	fwk/BaseCollection.h	/^   class StrepIterator {$/;"	c	class:Fwk::BaseCollection
StrepIterator	fwk/HashMap.h	/^   typedef BaseCollection::StrepIterator StrepIterator;$/;"	t	class:Fwk::HashMap
StrepIterator	fwk/LinkedList.h	/^   typedef BaseCollection::StrepIterator StrepIterator;$/;"	t	class:Fwk::LinkedList
StrepIterator	fwk/LinkedQueue.h	/^   typedef BaseCollection::StrepIterator StrepIterator;$/;"	t	class:Fwk::LinkedQueue
String	fwk/Types.h	/^typedef std::string String;$/;"	t	namespace:Fwk
StringBuf	fwk/String.h	/^class StringBuf {$/;"	c	namespace:Fwk
SwapBitmaps	display.cpp	/^void SwapBitmaps() {$/;"	f
TAC_TYPES_H	fwk/Types.h	/^#define TAC_TYPES_H$/;"	d
TRUE	mazewar.h	/^#define TRUE /;"	d
TheNextEvent	winsys.cpp	/^static short TheNextEvent = 0;$/;"	v	file:
TimeoutException	fwk/Exception.h	/^   TimeoutException( String what ) : Exception(what) {} $/;"	f	class:Fwk::TimeoutException
TimeoutException	fwk/Exception.h	/^class TimeoutException : public Exception {$/;"	c	namespace:Fwk
TokenId	mazewar.h	/^  TokenId(long num) : Ordinal<TokenId, long>(num) {}$/;"	f	class:TokenId
TokenId	mazewar.h	/^class TokenId : public Ordinal<TokenId, long> {$/;"	c
TokenVisible	display.cpp	/^static void TokenVisible(RatIndexType hisRatIndex) {$/;"	f	file:
True	fwk/TypeTraits.h	/^struct True { };$/;"	s	namespace:Fwk
U16	fwk/Types.h	/^typedef unsigned short U16;$/;"	t
U32	fwk/Types.h	/^typedef unsigned long U32;$/;"	t
U64	fwk/Types.h	/^typedef unsigned long long U64;$/;"	t
U8	fwk/Types.h	/^typedef unsigned char U8;$/;"	t
USE_BITMAPS	winsys.cpp	/^#define USE_BITMAPS /;"	d	file:
UnixTime	fwk/Types.h	/^typedef double UnixTime;$/;"	t	namespace:Fwk
UnknownArgException	fwk/Exception.h	/^   UnknownArgException( String what )  : Exception(what) {}$/;"	f	class:Fwk::UnknownArgException
UnknownArgException	fwk/Exception.h	/^class UnknownArgException : public Exception {$/;"	c	namespace:Fwk
UnknownAttrException	fwk/Exception.h	/^   UnknownAttrException( String what )  : Exception(what) {}$/;"	f	class:Fwk::UnknownAttrException
UnknownAttrException	fwk/Exception.h	/^class UnknownAttrException : public Exception {$/;"	c	namespace:Fwk
UnknownDelimiterException	fwk/Exception.h	/^   UnknownDelimiterException( String what )  : Exception(what) {}$/;"	f	class:Fwk::UnknownDelimiterException
UnknownDelimiterException	fwk/Exception.h	/^class UnknownDelimiterException : public Exception {$/;"	c	namespace:Fwk
UnknownEntityIdException	fwk/Exception.h	/^   UnknownEntityIdException( String what ) : InternalException(what) {} $/;"	f	class:Fwk::UnknownEntityIdException
UnknownEntityIdException	fwk/Exception.h	/^class UnknownEntityIdException : public InternalException {$/;"	c	namespace:Fwk
UnknownTypeException	fwk/Exception.h	/^   UnknownTypeException( String what )  : Exception(what) {}$/;"	f	class:Fwk::UnknownTypeException
UnknownTypeException	fwk/Exception.h	/^class UnknownTypeException : public Exception {$/;"	c	namespace:Fwk
UpdateScoreCard	display.cpp	/^void UpdateScoreCard(RatIndexType ratIndex) {$/;"	f
VECTORSIZE	mazewar.h	/^#define VECTORSIZE /;"	d
VIEW_X_DIM	winsys.cpp	/^#define VIEW_X_DIM /;"	d	file:
VIEW_X_ORIGIN	winsys.cpp	/^#define VIEW_X_ORIGIN /;"	d	file:
VIEW_Y_DIM	winsys.cpp	/^#define VIEW_Y_DIM /;"	d	file:
VIEW_Y_ORIGIN	winsys.cpp	/^#define VIEW_Y_ORIGIN /;"	d	file:
Value	fwk/TypeTraits.h	/^template< typename T > struct IsFloat { typedef False Value; };$/;"	t	struct:Fwk::IsFloat
Value	fwk/TypeTraits.h	/^template< typename T > struct IsInteger { typedef False Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template< typename T > struct IsPod { typedef False Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template< typename T > struct IsPod< T * > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template< typename T > struct IsPointer { typedef False Value; };$/;"	t	struct:Fwk::IsPointer
Value	fwk/TypeTraits.h	/^template< typename T > struct IsPointer< T * > { typedef True Value; };$/;"	t	struct:Fwk::IsPointer
Value	fwk/TypeTraits.h	/^template< typename T > struct IsSignedInteger { typedef False Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template< typename T > struct IsUnsignedInteger { typedef False Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsFloat< double > { typedef True Value; };$/;"	t	struct:Fwk::IsFloat
Value	fwk/TypeTraits.h	/^template<> struct IsFloat< float > { typedef True Value; };$/;"	t	struct:Fwk::IsFloat
Value	fwk/TypeTraits.h	/^template<> struct IsFloat< long double > { typedef True Value; };$/;"	t	struct:Fwk::IsFloat
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< bool > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< signed char > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< signed int > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< signed long > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< signed long long > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< signed short > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned char > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned int > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned long > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned long long > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsInteger< unsigned short > { typedef True Value; };$/;"	t	struct:Fwk::IsInteger
Value	fwk/TypeTraits.h	/^template<> struct IsPod< bool > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< double > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< float > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< long double > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< signed char > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< signed int > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< signed long > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< signed long long > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< signed short > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned char > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned int > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned long > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned long long > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsPod< unsigned short > { typedef True Value; };$/;"	t	struct:Fwk::IsPod
Value	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed char > { typedef True Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed int > { typedef True Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed long > { typedef True Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed long long > { typedef True Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsSignedInteger< signed short > { typedef True Value; };$/;"	t	struct:Fwk::IsSignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< bool > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned char > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned int > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned long > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned long long > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
Value	fwk/TypeTraits.h	/^template<> struct IsUnsignedInteger< unsigned short > { typedef True Value; };$/;"	t	struct:Fwk::IsUnsignedInteger
WEST	mazewar.h	/^#define WEST /;"	d
WriteScoreString	winsys.cpp	/^void WriteScoreString(RatIndexType rat) {$/;"	f
XORToken	display.cpp	/^static void XORToken(RatIndexType hisRatIndex) {$/;"	f	file:
XY	mazewar.h	/^typedef struct { short xcor, ycor; } XY;$/;"	t	typeref:struct:__anon4
XYpair	mazewar.h	/^typedef struct { XYpoint p1, p2; } XYpair;$/;"	t	typeref:struct:__anon3
XYpoint	mazewar.h	/^typedef struct { short x, y; } XYpoint;$/;"	t	typeref:struct:__anon2
XtNmouse	winsys.cpp	/^#define XtNmouse /;"	d	file:
__NOMINAL_H__	Nominal.h	/^#define __NOMINAL_H__$/;"	d
_aboutFace	toplevel.cpp	/^static Direction _aboutFace[NDIRECTION] = {SOUTH, NORTH, WEST, EAST};$/;"	v	file:
_deleteRef	fwk/BaseCollection.h	/^inline void _deleteRef( void const volatile *  t ) {}$/;"	f	namespace:Fwk
_deleteRef	fwk/BaseCollection.h	/^template<class T> inline void _deleteRef( PtrInterface<T> const *  t ) { t->deleteRef(); }$/;"	f	namespace:Fwk
_leftTurn	toplevel.cpp	/^static Direction _leftTurn[NDIRECTION] = {WEST, EAST, NORTH, SOUTH};$/;"	v	file:
_newRef	fwk/BaseCollection.h	/^inline void _newRef( void const volatile *  t ) {}$/;"	f	namespace:Fwk
_newRef	fwk/BaseCollection.h	/^template<class T> inline void _newRef( PtrInterface<T> const *  t ) { t->newRef(); }$/;"	f	namespace:Fwk
_ptr	fwk/HashMap.h	/^      DT * _ptr() const {return const_cast<DT*>(DerIteratorConst<DT>::ptr());}$/;"	f	class:Fwk::HashMap::DerIterator
_ptr	fwk/HashMap.h	/^      DT const * _ptr() const { return dynamic_cast<DT const *>(BaseIteratorConst<T>::ptr()); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
_ptr	fwk/HashMap.h	/^      T * _ptr() const { return const_cast< T * >( BaseIteratorConst<T>::ptr() ); }$/;"	f	class:Fwk::HashMap::DIterator
_ptr	fwk/HashMap.h	/^      T * _ptr() const { return const_cast< T * >( BaseIteratorConst<T>::ptr() ); }$/;"	f	class:Fwk::HashMap::Iterator
_ptr	fwk/HashMap.h	/^      T const * _ptr() const { return BaseIteratorConst<T>::ptr(); }$/;"	f	class:Fwk::HashMap::IteratorConstBase
_ptr	fwk/LinkedQueue.h	/^      T * _ptr() const { return const_cast<T *>(BaseIteratorConst<T>::ptr()); }$/;"	f	class:Fwk::LinkedQueue::Iterator
_ptr	fwk/LinkedQueue.h	/^      T const * _ptr() const { return BaseIteratorConst<T>::ptr(); }$/;"	f	class:Fwk::LinkedQueue::IteratorConst
_resources	winsys.cpp	/^struct _resources {$/;"	s	file:
_rightTurn	toplevel.cpp	/^static Direction _rightTurn[NDIRECTION] = {EAST, WEST, SOUTH, NORTH};$/;"	v	file:
aboutFace	toplevel.cpp	/^void aboutFace(void) {$/;"	f
absoInfo	mazewar.h	/^  absoluteInfo absoInfo;$/;"	m	struct:event
absoInfo	mazewar.h	/^  absoluteInfo absoInfo;$/;"	m	struct:eventACK
absoluteInfo	mazewar.h	/^struct absoluteInfo{$/;"	s
active	mazewar.h	/^  inline int active() const { return active_; }$/;"	f	class:MazewarInstance
activeIs	mazewar.h	/^  void activeIs(int active) { this->active_ = active; }$/;"	f	class:MazewarInstance
active_	mazewar.h	/^  int active_;$/;"	m	class:MazewarInstance
advance	fwk/HashMap.h	/^      void advance() {$/;"	f	class:Fwk::HashMap::IteratorConstBase
app_con	winsys.cpp	/^XtAppContext app_con;$/;"	v
app_resources	winsys.cpp	/^} app_resources;$/;"	v	typeref:struct:_resources
array_	fwk/Array.h	/^      T array_[ N ];$/;"	m	class:Fwk::Array
arrowImage	winsys.cpp	/^XImage *arrowImage;$/;"	v
attributeString	fwk/BaseNotifiee.cpp	/^String RootNotifiee::attributeString( RootNotifiee::AttributeId a )$/;"	f	class:Fwk::RootNotifiee
attribute__	fwk/BaseNotifiee.h	/^     attribute__ = 6,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
auditErrors	fwk/BaseNotifiee.cpp	/^U32 RootNotifiee::auditErrors( U32 ) const { return 0; }$/;"	f	class:Fwk::RootNotifiee
auditErrors	fwk/HashMap.h	/^   U32 auditErrors( U32 ) const {$/;"	f	class:Fwk::HashMap
auditErrors	fwk/LinkedList.h	/^   U32 auditErrors( U32 scope ) const {$/;"	f	class:Fwk::LinkedList
auditErrors	fwk/LinkedQueue.h	/^   U32 auditErrors( U32 scope ) const {$/;"	f	class:Fwk::LinkedQueue
auditErrors	fwk/ListRaw.h	/^   U32 auditErrors( U32 scope ) const {$/;"	f	class:Fwk::ListRaw
auditErrors__	fwk/BaseNotifiee.h	/^     auditErrors__ = 12,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
auditException_	fwk/Exception.h	/^      auditException_ = 19,$/;"	e	enum:Fwk::Exception::Id
backward	toplevel.cpp	/^void backward() {$/;"	f
beginningOfTime	fwk/Types.h	/^const Seconds beginningOfTime = -INFINITY;$/;"	m	namespace:Fwk
bg_pixel	winsys.cpp	/^  Pixel bg_pixel;    \/* color of background *\/$/;"	m	struct:_resources	file:
bitFlip	display.cpp	/^void bitFlip(register BitCell *bits, int size) {$/;"	f
bitReverse	fwk/HashMap.h	/^inline bitReverse(register U32 x)$/;"	f	namespace:Fwk
bits	mazewar.h	/^typedef struct { unsigned short bits[16]; } BitCell;$/;"	m	struct:__anon5
blah	winsys.cpp	/^const void *blah;$/;"	v
body	mazewar.h	/^  u_long body[256];$/;"	m	struct:__anon6
borderColor	winsys.cpp	/^  Pixel borderColor;$/;"	m	struct:_resources	file:
borderWidth	winsys.cpp	/^  Cardinal borderWidth;$/;"	m	struct:_resources	file:
born	mazewar.h	/^struct born{$/;"	s
bornData	mazewar.h	/^	born bornData;$/;"	m	union:eventSpecificData
bucket	fwk/HashMap.h	/^      S32 bucket() const { return (S32)data1_; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
bucket	fwk/HashMap.h	/^   U32 bucket( U32 hashVal ) const { $/;"	f	class:Fwk::HashMap
bucketIs	fwk/HashMap.h	/^      void bucketIs(S32 b) { data1_ = (U32)b; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
bucket_	fwk/HashMap.h	/^   Ptr<T> *bucket_; \/\/ pointer to vector of buckets.$/;"	m	class:Fwk::HashMap
buckets	fwk/HashMap.h	/^   U32 buckets() const { return buckets_; }$/;"	f	class:Fwk::HashMap
bucketsIs	fwk/HashMap.h	/^   void bucketsIs( U32 b ) {$/;"	f	class:Fwk::HashMap
buckets_	fwk/HashMap.h	/^   U32 buckets_;$/;"	m	class:Fwk::HashMap
byteSwap	display.cpp	/^void byteSwap(register BitCell *bits, int size) {$/;"	f
c2Delta	display.cpp	/^static XY c2Delta[NDIR] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};$/;"	v	file:
clearPosition	display.cpp	/^void clearPosition(RatIndexType ratIndex, Loc xClear, Loc yClear) {$/;"	f
clearSquare	display.cpp	/^void clearSquare(Loc xClear, Loc yClear) {$/;"	f
cloak	mazewar.h	/^	bool cloak;$/;"	m	struct:absoluteInfo
cloak	mazewar.h	/^	bool cloak;$/;"	m	union:eventSpecificData
cloak	toplevel.cpp	/^void cloak() { $/;"	f
cloaked	mazewar.h	/^  bool cloaked;$/;"	m	class:Rat
cloneState__	fwk/BaseNotifiee.h	/^     cloneState__ = 23,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
clone__	fwk/BaseNotifiee.h	/^     clone__ = 4,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
collection_	fwk/BaseCollection.h	/^      BaseCollection const * collection_;$/;"	m	class:Fwk::BaseCollection::StrepIterator
copyGC	winsys.cpp	/^GC copyGC, xorGC;                    \/* graphics contexts for window *\/$/;"	v
cur_height	winsys.cpp	/^unsigned int cur_width, cur_height;  \/* current width, height of window *\/$/;"	v
cur_width	winsys.cpp	/^unsigned int cur_width, cur_height;  \/* current width, height of window *\/$/;"	v
currentSlot	mazewar.h	/^	ActionSlot currentSlot;$/;"	m	class:MazewarInstance
dIterator	fwk/HashMap.h	/^   DIterator dIterator( const Key & k ) {$/;"	f	class:Fwk::HashMap
dIterator	fwk/HashMap.h	/^   DIterator dIterator( const Ptr<T>& start ) { $/;"	f	class:Fwk::HashMap
dIterator	fwk/HashMap.h	/^   DIterator dIterator() { $/;"	f	class:Fwk::HashMap
dIterator	fwk/HashMap.h	/^   DIteratorConst dIterator( const Key & k ) const {$/;"	f	class:Fwk::HashMap
dIterator	fwk/HashMap.h	/^   DIteratorConst dIterator( const Ptr<T>& start ) const {$/;"	f	class:Fwk::HashMap
dIterator	fwk/HashMap.h	/^   DIteratorConst dIterator() const {$/;"	f	class:Fwk::HashMap
data0_	fwk/BaseCollection.h	/^      U32 data0_;$/;"	m	class:Fwk::BaseCollection::StrepIterator
data1_	fwk/BaseCollection.h	/^      U32 data1_;$/;"	m	class:Fwk::BaseCollection::StrepIterator
deadRatCursor	winsys.cpp	/^static Cursor ratCursor, deadRatCursor, hourGlassCursor;$/;"	v	file:
default_resources	winsys.cpp	/^String default_resources[] = {$/;"	v
deleteAll	fwk/HashMap.h	/^   void deleteAll() {$/;"	f	class:Fwk::HashMap
deleteAll	fwk/LinkedList.h	/^    void deleteAll() {$/;"	f	class:Fwk::LinkedList
deleteAll	fwk/LinkedQueue.h	/^   void deleteAll() {$/;"	f	class:Fwk::LinkedQueue
deleteAll	fwk/ListRaw.h	/^    void deleteAll() {$/;"	f	class:Fwk::ListRaw
deleteHead	fwk/LinkedList.h	/^    void deleteHead() {$/;"	f	class:Fwk::LinkedList
deleteHead	fwk/LinkedQueue.h	/^   void deleteHead() {$/;"	f	class:Fwk::LinkedQueue
deleteHead	fwk/ListRaw.h	/^    void deleteHead() {$/;"	f	class:Fwk::ListRaw
deleteMember	fwk/HashMap.h	/^   Ptr<T> deleteMember( Key k ) {$/;"	f	class:Fwk::HashMap
deleteMember	fwk/HashMap.h	/^   void deleteMember( const Ptr<T>& t ) {$/;"	f	class:Fwk::HashMap
deleteMember	fwk/LinkedList.h	/^    T * deleteMember( T * member ) {$/;"	f	class:Fwk::LinkedList
deleteMember	fwk/LinkedList.h	/^    T * deleteMember( const typename T::Ptr& _member ) {$/;"	f	class:Fwk::LinkedList
deleteMember	fwk/LinkedQueue.h	/^   Ptr<T> deleteMember( T * member ) {$/;"	f	class:Fwk::LinkedQueue
deleteMember	fwk/LinkedQueue.h	/^   Ptr<T> deleteMember( const typename T::Ptr& _member ) {$/;"	f	class:Fwk::LinkedQueue
deleteMember	fwk/ListRaw.h	/^    void deleteMember( T * member ) {$/;"	f	class:Fwk::ListRaw
deleteMemberThruIterator	fwk/LinkedList.h	/^   virtual void deleteMemberThruIterator( T * newMember ) {}$/;"	f	class:Fwk::LinkedList
deletePtr	fwk/HashMap.h	/^      void deletePtr() {$/;"	f	class:Fwk::HashMap::DIterator
deletePtr	fwk/HashMap.h	/^      void deletePtr() {$/;"	f	class:Fwk::HashMap::DerIterator
deletePtr	fwk/HashMap.h	/^      void deletePtr() {$/;"	f	class:Fwk::HashMap::Iterator
deletePtr	fwk/LinkedList.h	/^      void deletePtr() {	$/;"	f	class:Fwk::LinkedList::LlIterator
deletePtr	fwk/LinkedQueue.h	/^      void deletePtr() {$/;"	f	class:Fwk::LinkedQueue::Iterator
deletePtr	fwk/ListRaw.h	/^      void deletePtr() {$/;"	f	class:Fwk::ListRaw::LrIterator
deleteRef	fwk/PtrInterface.h	/^PtrInterface<T>::deleteRef() const {$/;"	f	class:Fwk::PtrInterface
deleteRef__	fwk/BaseNotifiee.h	/^     deleteRef__ = 10,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
destinationId	mazewar.h	/^	uint32_t destinationId;$/;"	m	struct:SIACK
destinationId	mazewar.h	/^	uint32_t destinationId;$/;"	m	struct:eventACK
destinationId	mazewar.h	/^	uint32_t destinationId;$/;"	m	struct:heartbeatACK
dir	mazewar.h	/^								Direction dir;$/;"	m	struct:Missile
dir	mazewar.h	/^  Direction dir;$/;"	m	class:Rat
dir	mazewar.h	/^  inline Direction dir() const { return dir_; }$/;"	f	class:MazewarInstance
dirIs	mazewar.h	/^  void dirIs(Direction dir) { this->dir_ = dir; }$/;"	f	class:MazewarInstance
dirPeek	mazewar.h	/^  inline Direction dirPeek() const { return dirPeek_; }$/;"	f	class:MazewarInstance
dirPeekIs	mazewar.h	/^  void dirPeekIs(Direction dirPeek) { this->dirPeek_ = dirPeek; }$/;"	f	class:MazewarInstance
dirPeek_	mazewar.h	/^  Direction dirPeek_;$/;"	m	class:MazewarInstance
dir_	mazewar.h	/^  Direction dir_;$/;"	m	class:MazewarInstance
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:absoluteInfo
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:born
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:missileHit
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:missileInfo
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:missileProjection
direction	mazewar.h	/^	uint8_t direction;$/;"	m	struct:movement
displayFD	winsys.cpp	/^int displayFD;             \/* fd of display for events *\/$/;"	v
distance	mazewar.h	/^  short distance;$/;"	m	class:RatAppearance
dpy	winsys.cpp	/^Display *dpy;                        \/* display used *\/$/;"	v
drawMaze	winsys.cpp	/^void drawMaze() {$/;"	f
edge1	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge2	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge3	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge3Lines	display.cpp	/^static XYpair edge3Lines[2], edge7Lines[2];$/;"	v	file:
edge4	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge5	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge6	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge7	display.cpp	/^static bool edge1, edge2, edge3, edge4, edge5, edge6, edge7;$/;"	v	file:
edge7Lines	display.cpp	/^static XYpair edge3Lines[2], edge7Lines[2];$/;"	v	file:
emptyAhead	init.cpp	/^bool emptyAhead() {$/;"	f
emptyAllBuckets	fwk/HashMap.h	/^   void emptyAllBuckets() {$/;"	f	class:Fwk::HashMap
emptyBehind	init.cpp	/^bool emptyBehind() {$/;"	f
emptyLeft	init.cpp	/^bool emptyLeft() {$/;"	f
emptyRight	init.cpp	/^bool emptyRight() {$/;"	f
endOfTime	fwk/Types.h	/^const Seconds endOfTime = INFINITY;$/;"	m	namespace:Fwk
entityIdInUseException_	fwk/Exception.h	/^      entityIdInUseException_ = 21,$/;"	e	enum:Fwk::Exception::Id
entityId__	fwk/BaseNotifiee.h	/^     entityId__ = 22,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
entityLogMsgLenException_	fwk/Exception.h	/^      entityLogMsgLenException_ = 22,$/;"	e	enum:Fwk::Exception::Id
entityLogWriteToConstException_	fwk/Exception.h	/^      entityLogWriteToConstException_ = 23,$/;"	e	enum:Fwk::Exception::Id
entityNotDirException_	fwk/Exception.h	/^      entityNotDirException_ = 18,$/;"	e	enum:Fwk::Exception::Id
entityNotFoundException_	fwk/Exception.h	/^      entityNotFoundException_ = 17,$/;"	e	enum:Fwk::Exception::Id
entityRef__	fwk/BaseNotifiee.h	/^     entityRef__ = 5,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
epsilon	fwk/Types.h	/^static inline double epsilon() { return 0.000001; }$/;"	f	namespace:Fwk
errnoException_	fwk/Exception.h	/^      errnoException_ = 24,$/;"	e	enum:Fwk::Exception::Id
errno_	fwk/Exception.h	/^   int errno_;$/;"	m	class:Fwk::ErrnoException
error	fwk/Exception.h	/^   int error() const { return errno_; }$/;"	f	class:Fwk::ErrnoException
evACK_	mazewar.h	/^				eventACK evACK_;$/;"	m	union:__anon8
ev_	mazewar.h	/^				event ev_;$/;"	m	union:__anon8
event	mazewar.h	/^struct event{$/;"	s
eventACK	mazewar.h	/^struct eventACK{$/;"	s
eventData	mazewar.h	/^	eventSpecificData eventData;$/;"	m	struct:event
eventDetail	mazewar.h	/^  MW244BPacket *eventDetail; \/* for incoming data *\/$/;"	m	struct:__anon7
eventId	mazewar.h	/^  uint32_t eventId;$/;"	m	struct:eventACK
eventSource	mazewar.h	/^  Sockaddr eventSource;$/;"	m	struct:__anon7
eventSpecificData	mazewar.h	/^union eventSpecificData{$/;"	u
eventType	mazewar.h	/^  short eventType;$/;"	m	struct:__anon7
exist	mazewar.h	/^								bool exist;$/;"	m	struct:Missile
fg_pixel	winsys.cpp	/^  Pixel fg_pixel;    \/* color of lines and such *\/$/;"	m	struct:_resources	file:
filename	fwk/Exception.h	/^   String filename() const { return filename_; }$/;"	f	class:Fwk::ErrnoException
filename_	fwk/Exception.h	/^   String filename_;$/;"	m	class:Fwk::ErrnoException
findNext	fwk/HashMap.h	/^   T * findNext( T const * t, S32 * n ) const { \/\/ Move to next non-null bucket if any.$/;"	f	class:Fwk::HashMap
findNextBucket	fwk/HashMap.h	/^   T * findNextBucket( S32 * bkt ) const {$/;"	f	class:Fwk::HashMap
fixPrev	fwk/ListRaw.h	/^       void fixPrev() {$/;"	f	class:Fwk::ListRaw::LrIterator
flashIcon	winsys.cpp	/^bool flashIcon = FALSE;    \/* should icon be flashing? *\/$/;"	v
forward	toplevel.cpp	/^void forward(void) {$/;"	f
fwkValue	fwk/BaseNotifiee.h	/^   RootNotifiee * fwkValue() { return this; }$/;"	f	class:Fwk::RootNotifiee
getHostName	init.cpp	/^void getHostName(char *prompt, char **hostName, Sockaddr *hostAddr) {$/;"	f
getMaze	init.cpp	/^void getMaze(void) {$/;"	f
getName	init.cpp	/^void getName(char *prompt, char **ratName) {$/;"	f
getRat	display.cpp	/^static void getRat(RatIndexType hisRatIndex, int *x, int *y, int *size) {$/;"	f	file:
getString	init.cpp	/^void getString(char *prompt, char **string) {$/;"	f
groupAddr	toplevel.cpp	/^static Sockaddr groupAddr;$/;"	v	file:
handleDefault	fwk/BaseNotifiee.cpp	/^void RootNotifiee::handleDefault( Activity *, AttributeId, bool ) {}$/;"	f	class:Fwk::RootNotifiee
handleNotification	fwk/BaseNotifiee.cpp	/^void RootNotifiee::handleNotification( Activity * ) {}$/;"	f	class:Fwk::RootNotifiee
handleNotificationException	fwk/BaseNotifiee.cpp	/^RootNotifiee::handleNotificationException( AttributeId aid ) {$/;"	f	class:Fwk::RootNotifiee
handleNotificationException	fwk/BaseNotifiee.cpp	/^RootNotifiee::handleNotificationException() {$/;"	f	class:Fwk::RootNotifiee
hash	fwk/String.h	/^hash( String const & s )$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^hash( T const & t ) {$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^hash( U16 t ) {$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^hash( U32 t ) {$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^hash( U8 t ) {$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^hash( int t ) {$/;"	f	namespace:Fwk
hash	fwk/Types.h	/^inline U32 hash( double d ) {$/;"	f	namespace:Fwk
hashMap	fwk/HashMap.h	/^      Self * hashMap() const { return const_cast<Self *>( IteratorConst::hashMap() ); }$/;"	f	class:Fwk::HashMap::Iterator
hashMap	fwk/HashMap.h	/^      Self * hashMap() const { return const_cast<Self *>(DIteratorConst::hashMap() ); }$/;"	f	class:Fwk::HashMap::DIterator
hashMap	fwk/HashMap.h	/^      Self * hashMap() const {$/;"	f	class:Fwk::HashMap::DerIterator
hashMap	fwk/HashMap.h	/^      Self const * hashMap() const { return static_cast<Self const *>( collection_ ); }$/;"	f	class:Fwk::HashMap::DIteratorConst
hashMap	fwk/HashMap.h	/^      Self const * hashMap() const { return static_cast<Self const *>( collection_ ); }$/;"	f	class:Fwk::HashMap::IteratorConstBase
hashMap	fwk/HashMap.h	/^      Self const * hashMap() const { return static_cast<Self const *>(collection_); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
hbACK_	mazewar.h	/^				heartbeatACK hbACK_;$/;"	m	union:__anon8
hb_	mazewar.h	/^				heartbeat hb_;$/;"	m	union:__anon8
head	fwk/LinkedList.h	/^    T * head() { return head_.ptr(); }$/;"	f	class:Fwk::LinkedList
head	fwk/LinkedList.h	/^    const T * head() const { return head_.ptr(); }$/;"	f	class:Fwk::LinkedList
head	fwk/LinkedQueue.h	/^   T * head() const { return head_.ptr(); }$/;"	f	class:Fwk::LinkedQueue
head	fwk/ListRaw.h	/^    T * head() const { return head_; }$/;"	f	class:Fwk::ListRaw
headDel	fwk/LinkedList.h	/^    Ptr<T> headDel() {$/;"	f	class:Fwk::LinkedList
headDel	fwk/LinkedQueue.h	/^   Ptr<T> headDel() {$/;"	f	class:Fwk::LinkedQueue
headDel	fwk/ListRaw.h	/^    T * headDel() {$/;"	f	class:Fwk::ListRaw
head_	fwk/LinkedList.h	/^   Ptr<T> head_;$/;"	m	class:Fwk::LinkedList
head_	fwk/LinkedQueue.h	/^   Ptr<T> head_;$/;"	m	class:Fwk::LinkedQueue
head_	fwk/ListRaw.h	/^    T * head_;$/;"	m	class:Fwk::ListRaw
heartbeat	mazewar.h	/^struct heartbeat{$/;"	s
heartbeatACK	mazewar.h	/^struct heartbeatACK{$/;"	s
heartbeatId	mazewar.h	/^  uint32_t heartbeatId;$/;"	m	struct:heartbeat
heartbeatId	mazewar.h	/^  uint32_t heartbeatId;$/;"	m	struct:heartbeatACK
hidden	display.cpp	/^static XYpair *hidden(Loc x, Loc y, Direction dir, XYpair *p) {$/;"	f	file:
hidden__	fwk/Types.h	/^#define hidden__ /;"	d
hourGlassCursor	winsys.cpp	/^static Cursor ratCursor, deadRatCursor, hourGlassCursor;$/;"	v	file:
iconInverted	winsys.cpp	/^bool iconInverted = FALSE; \/* icon should be\/is inverted *\/$/;"	v
iconMask	winsys.cpp	/^Pixmap iconMask; \/* mask for icon outline *\/$/;"	v
icon_flash	winsys.cpp	/^int icon_flash = 0;$/;"	v
icon_pixmap	winsys.cpp	/^Pixmap icon_pixmap, iconmask_pixmap; \/* icon, mask bitmaps *\/$/;"	v
icon_reverse_pixmap	winsys.cpp	/^Pixmap icon_reverse_pixmap;$/;"	v
iconmask_pixmap	winsys.cpp	/^Pixmap icon_pixmap, iconmask_pixmap; \/* icon, mask bitmaps *\/$/;"	v
id	fwk/Exception.cpp	/^Fwk::AuditException::id() {$/;"	f	class:Fwk::AuditException
id	fwk/Exception.cpp	/^Fwk::EntityIdInUseException::id() {$/;"	f	class:Fwk::EntityIdInUseException
id	fwk/Exception.cpp	/^Fwk::EntityLogMsgLenException::id() {$/;"	f	class:Fwk::EntityLogMsgLenException
id	fwk/Exception.cpp	/^Fwk::EntityLogWriteToConstException::id() {$/;"	f	class:Fwk::EntityLogWriteToConstException
id	fwk/Exception.cpp	/^Fwk::EntityNotDirException::id() {$/;"	f	class:Fwk::EntityNotDirException
id	fwk/Exception.cpp	/^Fwk::EntityNotFoundException::id() {$/;"	f	class:Fwk::EntityNotFoundException
id	fwk/Exception.cpp	/^Fwk::ErrnoException::id() {$/;"	f	class:Fwk::ErrnoException
id	fwk/Exception.cpp	/^Fwk::Exception::id() {$/;"	f	class:Fwk::Exception
id	fwk/Exception.cpp	/^Fwk::IllegalNameException::id() {$/;"	f	class:Fwk::IllegalNameException
id	fwk/Exception.cpp	/^Fwk::InternalException::id() {$/;"	f	class:Fwk::InternalException
id	fwk/Exception.cpp	/^Fwk::ListException::id() {$/;"	f	class:Fwk::ListException
id	fwk/Exception.cpp	/^Fwk::MemoryException::id() {$/;"	f	class:Fwk::MemoryException
id	fwk/Exception.cpp	/^Fwk::MemoryLimitExceededException::id() {$/;"	f	class:Fwk::MemoryLimitExceededException
id	fwk/Exception.cpp	/^Fwk::NameInUseException::id() {$/;"	f	class:Fwk::NameInUseException
id	fwk/Exception.cpp	/^Fwk::NoImplementationException::id() {$/;"	f	class:Fwk::NoImplementationException
id	fwk/Exception.cpp	/^Fwk::PermissionException::id() {$/;"	f	class:Fwk::PermissionException
id	fwk/Exception.cpp	/^Fwk::RangeException::id() {$/;"	f	class:Fwk::RangeException
id	fwk/Exception.cpp	/^Fwk::RpcConnectionException::id() {$/;"	f	class:Fwk::RpcConnectionException
id	fwk/Exception.cpp	/^Fwk::RpcException::id() {$/;"	f	class:Fwk::RpcException
id	fwk/Exception.cpp	/^Fwk::StorageException::id() {$/;"	f	class:Fwk::StorageException
id	fwk/Exception.cpp	/^Fwk::TimeoutException::id() {$/;"	f	class:Fwk::TimeoutException
id	fwk/Exception.cpp	/^Fwk::UnknownArgException::id() {$/;"	f	class:Fwk::UnknownArgException
id	fwk/Exception.cpp	/^Fwk::UnknownAttrException::id() {$/;"	f	class:Fwk::UnknownAttrException
id	fwk/Exception.cpp	/^Fwk::UnknownDelimiterException::id() {$/;"	f	class:Fwk::UnknownDelimiterException
id	fwk/Exception.cpp	/^Fwk::UnknownEntityIdException::id() {$/;"	f	class:Fwk::UnknownEntityIdException
id	fwk/Exception.cpp	/^Fwk::UnknownTypeException::id() {$/;"	f	class:Fwk::UnknownTypeException
illegalNameException_	fwk/Exception.h	/^      illegalNameException_ = 12,$/;"	e	enum:Fwk::Exception::Id
initCursors	winsys.cpp	/^static void initCursors(void) {$/;"	f	file:
initMaze	winsys.cpp	/^static void initMaze() {$/;"	f	file:
initRats	winsys.cpp	/^static void initRats(int width, int height) {$/;"	f	file:
initialNotification__	fwk/BaseNotifiee.h	/^     initialNotification__ = -2,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
internalException_	fwk/Exception.h	/^      internalException_ = 6,$/;"	e	enum:Fwk::Exception::Id
isMember	fwk/HashMap.h	/^   bool isMember( const T * t ) const {$/;"	f	class:Fwk::HashMap
isNonReferencingIs	fwk/BaseNotifiee.cpp	/^void RootNotifiee::isNonReferencingIs( bool b ) { assert( false ); }$/;"	f	class:Fwk::RootNotifiee
iterator	fwk/Array.h	/^   IteratorConst iterator() const {$/;"	f	class:Fwk::Array
iterator	fwk/HashMap.h	/^   DerIterator<DT>  iterator( const Key & k ) {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   DerIterator<DT> iterator( const Ptr<T>& start ) { $/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   DerIterator<DT> iterator() { $/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   DerIteratorConst<DT> iterator( const Key & k ) const {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   DerIteratorConst<DT> iterator( const Ptr<T>& start ) const {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   DerIteratorConst<DT> iterator() const {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   Iterator iterator( const Key & k ) {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   Iterator iterator( const Ptr<T>& start ) { $/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   Iterator iterator() { $/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   IteratorConst iterator( const Key & k ) const {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   IteratorConst iterator( const Ptr<T>& start ) const {$/;"	f	class:Fwk::HashMap
iterator	fwk/HashMap.h	/^   IteratorConst iterator() const {$/;"	f	class:Fwk::HashMap
iterator	fwk/LinkedList.h	/^    Iterator iterator() {$/;"	f	class:Fwk::LinkedList
iterator	fwk/LinkedList.h	/^    IteratorConst iterator() const {$/;"	f	class:Fwk::LinkedList
iterator	fwk/LinkedQueue.h	/^   Iterator iterator() {$/;"	f	class:Fwk::LinkedQueue
iterator	fwk/LinkedQueue.h	/^   IteratorConst iterator( const Ptr<T>& start ) const {$/;"	f	class:Fwk::LinkedQueue
iterator	fwk/LinkedQueue.h	/^   IteratorConst iterator() const {$/;"	f	class:Fwk::LinkedQueue
iterator	fwk/ListRaw.h	/^    Iterator iterator() { return Iterator( this, head_ ); }$/;"	f	class:Fwk::ListRaw
iterator	fwk/ListRaw.h	/^    IteratorConst iterator( const Ptr<T>& start ) const {$/;"	f	class:Fwk::ListRaw
iterator	fwk/ListRaw.h	/^    IteratorConst iterator() const {$/;"	f	class:Fwk::ListRaw
iteratorDelete	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::iteratorDelete( Fwk::BaseCollection::StrepIterator& ) const {}$/;"	f	class:Fwk::BaseCollection
iteratorDelete	fwk/BaseCollection.h	/^   virtual void iteratorDelete( StrepIterator & it ) const { $/;"	f	class:Fwk::BaseRefCollection
iteratorIncr	fwk/Array.h	/^void Array< T, N, K >::iteratorIncr( BaseCollection::StrepIterator & iter ) const {$/;"	f	class:Fwk::Array
iteratorIncr	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::iteratorIncr( Fwk::BaseCollection::StrepIterator & ) const {$/;"	f	class:Fwk::BaseCollection
iteratorIncr	fwk/HashMap.h	/^   virtual void iteratorIncr( StrepIterator& bi ) const {$/;"	f	class:Fwk::HashMap
iteratorIncr	fwk/LinkedList.h	/^   virtual void iteratorIncr( StrepIterator& iter ) const {$/;"	f	class:Fwk::LinkedList
iteratorIncr	fwk/LinkedQueue.h	/^   virtual void iteratorIncr( StrepIterator& bi ) const {$/;"	f	class:Fwk::LinkedQueue
iteratorMoreLeft	fwk/Array.h	/^bool Array< T, N, K >::iteratorMoreLeft( BaseCollection::StrepIterator const & iter ) const {$/;"	f	class:Fwk::Array
iteratorMoreLeft	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::iteratorMoreLeft( Fwk::BaseCollection::StrepIterator const & ) const {$/;"	f	class:Fwk::BaseCollection
iteratorMoreLeft	fwk/HashMap.h	/^   virtual bool iteratorMoreLeft( StrepIterator const & bi ) const {$/;"	f	class:Fwk::HashMap
iteratorMoreLeft	fwk/LinkedList.h	/^   virtual bool iteratorMoreLeft( StrepIterator const& iter ) const {$/;"	f	class:Fwk::LinkedList
iteratorMoreLeft	fwk/LinkedQueue.h	/^   virtual bool iteratorMoreLeft( StrepIterator const & bi ) const {$/;"	f	class:Fwk::LinkedQueue
iteratorSpaceCopy	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::iteratorSpaceCopy( Fwk::BaseCollection::StrepIterator const & other ) const$/;"	f	class:Fwk::BaseCollection
iteratorSpaceCopy	fwk/BaseCollection.h	/^   virtual void const * iteratorSpaceCopy( StrepIterator const & it ) const { $/;"	f	class:Fwk::BaseRefCollection
iteratorStrep	fwk/Array.h	/^String Array< T, N, K >::iteratorStrep( BaseCollection::StrepIterator const & iter ) const {$/;"	f	class:Fwk::Array
iteratorStrep	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::iteratorStrep( Fwk::BaseCollection::StrepIterator const &) const$/;"	f	class:Fwk::BaseCollection
iteratorStrep	fwk/HashMap.h	/^   virtual String iteratorStrep( StrepIterator const & bi ) const {$/;"	f	class:Fwk::HashMap
iteratorStrep	fwk/LinkedList.h	/^   virtual String iteratorStrep( StrepIterator const& iter ) const {$/;"	f	class:Fwk::LinkedList
iteratorStrep	fwk/LinkedQueue.h	/^   virtual String iteratorStrep( StrepIterator const & bi ) const {$/;"	f	class:Fwk::LinkedQueue
key	fwk/HashMap.h	/^      Key key() const { return _ptr()->fwkKey(); }$/;"	f	class:Fwk::HashMap::DIteratorConst
key	fwk/HashMap.h	/^      Key key() const { return _ptr()->fwkKey(); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
key	fwk/HashMap.h	/^      Key key() const { return _ptr()->fwkKey(); }$/;"	f	class:Fwk::HashMap::IteratorConst
l1Delta	display.cpp	/^static XY l1Delta[NDIR] = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};$/;"	v	file:
l2Delta	display.cpp	/^static XY l2Delta[NDIR] = {{1, -1}, {-1, 1}, {1, 1}, {-1, -1}};$/;"	v	file:
leftTurn	toplevel.cpp	/^void leftTurn(void) {$/;"	f
likely	fwk/Types.h	/^#define likely(/;"	d
list	fwk/LinkedList.h	/^       LinkedList<T>* list() {$/;"	f	class:Fwk::LinkedList::LlIterator
list	fwk/LinkedList.h	/^       const LinkedList<T>* list() const {$/;"	f	class:Fwk::LinkedList::ConstLlIterator
list	fwk/LinkedQueue.h	/^      Self * list() const {$/;"	f	class:Fwk::LinkedQueue::IteratorConst
list	fwk/LinkedQueue.h	/^      Self* list() const {$/;"	f	class:Fwk::LinkedQueue::Iterator
listException_	fwk/Exception.h	/^      listException_ = 25,$/;"	e	enum:Fwk::Exception::Id
listRaw	fwk/ListRaw.h	/^       ListRaw<T> * listRaw() {$/;"	f	class:Fwk::ListRaw::LrIterator
listRaw	fwk/ListRaw.h	/^       ListRaw<T> const * listRaw() const {$/;"	f	class:Fwk::ListRaw::LrIteratorConst
lqNext	fwk/BaseNotifiee.h	/^   RootNotifiee * lqNext()  { return lqNext_.ptr(); }$/;"	f	class:Fwk::RootNotifiee
lqNext	fwk/BaseNotifiee.h	/^   RootNotifiee const * lqNext()  const { return lqNext_.ptr(); }$/;"	f	class:Fwk::RootNotifiee
lqNextIs	fwk/BaseNotifiee.h	/^   void lqNextIs( RootNotifiee* _lqNext ) { lqNext_ = _lqNext; }$/;"	f	class:Fwk::RootNotifiee
lqNext_	fwk/BaseNotifiee.h	/^   Ptr    lqNext_;$/;"	m	class:Fwk::RootNotifiee
main	toplevel.cpp	/^int main(int argc, char *argv[]) {$/;"	f
manageMissiles	toplevel.cpp	/^void manageMissiles() {$/;"	f
mapped	winsys.cpp	/^bool mapped = FALSE;       \/* should really display? *\/$/;"	v
markedForDeletion	fwk/HashMap.h	/^      bool markedForDeletion() const { return _ptr()->tacMarkedForDeletion(); }$/;"	f	class:Fwk::HashMap::DIteratorConst
markedForDeletion	fwk/HashMap.h	/^      bool markedForDeletion() const { return _ptr()->tacMarkedForDeletion(); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
markedForDeletion	fwk/HashMap.h	/^      bool markedForDeletion() const { return _ptr()->tacMarkedForDeletion(); }$/;"	f	class:Fwk::HashMap::IteratorConst
markedForDeletion	fwk/HashMap.h	/^      void markedForDeletion( bool on ) {$/;"	f	class:Fwk::HashMap::DIterator
markedForDeletion	fwk/HashMap.h	/^      void markedForDeletion( bool on ) {$/;"	f	class:Fwk::HashMap::DerIterator
markedForDeletion	fwk/HashMap.h	/^      void markedForDeletion( bool on ) {$/;"	f	class:Fwk::HashMap::Iterator
maxIndex	fwk/Array.h	/^   enum { maxIndex = N };$/;"	e	enum:Fwk::Array::__anon1
maybeGrow	fwk/HashMap.h	/^   void maybeGrow() {$/;"	f	class:Fwk::HashMap
maybeShrink	fwk/HashMap.h	/^   void maybeShrink() {$/;"	f	class:Fwk::HashMap
mazeBitmap	winsys.cpp	/^Pixmap mazeBitmap; \/* the maze *\/$/;"	v
mazeBits	init.cpp	/^static const MazeType mazeBits = {$/;"	v	file:
mazeBits	winsys.cpp	/^short mazeBits[MAZEXMAX * MAZEYMAX * 16]; \/* shorts better be 16 bits! *\/$/;"	v
mazeImage	winsys.cpp	/^XImage *mazeImage; \/* the maze *\/$/;"	v
mazePort	mazewar.h	/^  inline long mazePort() const { return mazePort_; }$/;"	f	class:MazewarInstance
mazePortIs	mazewar.h	/^  void mazePortIs(long mazePort) { this->mazePort_ = mazePort; }$/;"	f	class:MazewarInstance
mazePort_	mazewar.h	/^  long mazePort_;$/;"	m	class:MazewarInstance
mazeRats_	mazewar.h	/^  Rat mazeRats_[MAX_RATS];$/;"	m	class:MazewarInstance
maze_	mazewar.h	/^  MazeType maze_;$/;"	m	class:MazewarInstance
mazewarInstanceNew	mazewar.h	/^  static MazewarInstance::Ptr mazewarInstanceNew(string s) {$/;"	f	class:MazewarInstance
member	fwk/HashMap.h	/^   T * member( const Key& k )  { return operator[](k); }$/;"	f	class:Fwk::HashMap
member	fwk/HashMap.h	/^   T const * member( const Key& k ) const { return operator[](k); }$/;"	f	class:Fwk::HashMap
member	fwk/LinkedList.h	/^    T const * member( T const * m ) const  { return operator[](m); }$/;"	f	class:Fwk::LinkedList
member	fwk/LinkedList.h	/^   T * member( T const * m ) { return operator[](m); }$/;"	f	class:Fwk::LinkedList
member	fwk/LinkedList.h	/^   T * member( const typename T::Ptr& m ) { return operator[](m); }$/;"	f	class:Fwk::LinkedList
member	fwk/LinkedList.h	/^   T const * member( const typename T::Ptr& m) const {return operator[](m); }$/;"	f	class:Fwk::LinkedList
member	fwk/LinkedQueue.h	/^   T const * member( T const * m ) const { return operator[](m); }$/;"	f	class:Fwk::LinkedQueue
memberDel	fwk/HashMap.h	/^   Ptr<T> memberDel( Key k ) {$/;"	f	class:Fwk::HashMap
memberDelAll	fwk/HashMap.h	/^   void memberDelAll() {$/;"	f	class:Fwk::HashMap
memberIs	fwk/HashMap.h	/^   void memberIs( const Ptr<T>& t ) {$/;"	f	class:Fwk::HashMap
memberIs	fwk/HashMap.h	/^   void memberIs( const T * t ) { memberIs( const_cast<T *>(t) ); }$/;"	f	class:Fwk::HashMap
members	fwk/HashMap.h	/^   U32 members() const { return members_; }$/;"	f	class:Fwk::HashMap
members	fwk/LinkedList.h	/^    U32 members() const { return members_; }$/;"	f	class:Fwk::LinkedList
members	fwk/LinkedQueue.h	/^   U32 members() const { return members_; }$/;"	f	class:Fwk::LinkedQueue
members	fwk/ListRaw.h	/^    U32 members() const { return members_; }$/;"	f	class:Fwk::ListRaw
members_	fwk/HashMap.h	/^   U32 members_;$/;"	m	class:Fwk::HashMap
members_	fwk/LinkedList.h	/^   U32 members_;$/;"	m	class:Fwk::LinkedList
members_	fwk/LinkedQueue.h	/^   U32 members_;$/;"	m	class:Fwk::LinkedQueue
members_	fwk/ListRaw.h	/^    U32 members_;$/;"	m	class:Fwk::ListRaw
memoryException_	fwk/Exception.h	/^      memoryException_ = 8,$/;"	e	enum:Fwk::Exception::Id
memoryLimitExceededException_	fwk/Exception.h	/^      memoryLimitExceededException_ = 26,$/;"	e	enum:Fwk::Exception::Id
missile	display.h	/^static BitCell missile[1] = {$/;"	v
missileHit	mazewar.h	/^struct missileHit{$/;"	s
missileHitData	mazewar.h	/^	missileHit missileHitData;$/;"	m	union:eventSpecificData
missileId	mazewar.h	/^	uint8_t missileId;$/;"	m	struct:missileHit
missileId	mazewar.h	/^	uint8_t missileId;$/;"	m	struct:missileInfo
missileId	mazewar.h	/^	uint8_t missileId;$/;"	m	struct:missileProjection
missileInfo	mazewar.h	/^struct missileInfo{$/;"	s
missileNumber	mazewar.h	/^	uint8_t missileNumber;$/;"	m	struct:absoluteInfo
missileProjData	mazewar.h	/^	missileProjection missileProjData; $/;"	m	union:eventSpecificData
missileProjection	mazewar.h	/^struct missileProjection{$/;"	s
missiles	mazewar.h	/^	missileInfo missiles[4];$/;"	m	struct:absoluteInfo
mouseground	winsys.cpp	/^  Pixel mouseground; \/* mouse cursor color *\/$/;"	m	struct:_resources	file:
moveData	mazewar.h	/^	movement moveData;$/;"	m	union:eventSpecificData
movement	mazewar.h	/^struct movement{$/;"	s
multipleAttributes__	fwk/BaseNotifiee.h	/^     multipleAttributes__ = -1,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
mwWindow	winsys.cpp	/^Window mwWindow;                          \/* parent window *\/$/;"	v
myAddr	mazewar.h	/^  inline Sockaddr *myAddr() const { return myAddr_; }$/;"	f	class:MazewarInstance
myAddrIs	mazewar.h	/^  void myAddrIs(Sockaddr *myAddr) { this->myAddr_ = myAddr; }$/;"	f	class:MazewarInstance
myAddr_	mazewar.h	/^  Sockaddr *myAddr_;$/;"	m	class:MazewarInstance
myIndex	mazewar.h	/^	inline RatIndexType myIndex() const { return this->myRatIndex_;}$/;"	f	class:MazewarInstance
myIndexIs	mazewar.h	/^	void myIndexIs(RatIndexType index){ this->myRatIndex_ = index;}$/;"	f	class:MazewarInstance
myName_	mazewar.h	/^  RatName myName_;$/;"	m	class:MazewarInstance
myRatId	mazewar.h	/^  inline RatId myRatId() const { return myRatId_; }$/;"	f	class:MazewarInstance
myRatIdIs	mazewar.h	/^  void myRatIdIs(RatId myRatId) { this->myRatId_ = myRatId; }$/;"	f	class:MazewarInstance
myRatId_	mazewar.h	/^  RatId myRatId_;$/;"	m	class:MazewarInstance
myRatIndex_	mazewar.h	/^  RatIndexType myRatIndex_;$/;"	m	class:MazewarInstance
name	fwk/BaseNotifiee.cpp	/^String RootNotifiee::name() const { return "unknown"; }$/;"	f	class:Fwk::RootNotifiee
name	fwk/NamedInterface.h	/^	String name() const { return name_; }$/;"	f	class:Fwk::NamedInterface
nameInUseException_	fwk/Exception.h	/^      nameInUseException_ = 11,$/;"	e	enum:Fwk::Exception::Id
name_	fwk/NamedInterface.h	/^	String name_;$/;"	m	class:Fwk::NamedInterface
name__	fwk/BaseNotifiee.h	/^     name__ = 2,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
negativeAttr__	fwk/BaseNotifiee.h	/^     negativeAttr__ = 0x80000000, $/;"	e	enum:Fwk::RootNotifiee::AttributeId
netInit	toplevel.cpp	/^void netInit() {$/;"	f
newHead	fwk/LinkedQueue.h	/^   void newHead( T * newMember ) {$/;"	f	class:Fwk::LinkedQueue
newHead	fwk/LinkedQueue.h	/^   void newHead( const typename T::Ptr& newMember ) {$/;"	f	class:Fwk::LinkedQueue
newHead	fwk/ListRaw.h	/^    void newHead( T * newMember ) {$/;"	f	class:Fwk::ListRaw
newHead	fwk/ListRaw.h	/^    void newHead( const typename T::Ptr& newMember ) {$/;"	f	class:Fwk::ListRaw
newMember	fwk/HashMap.h	/^   void newMember( T * t ) {$/;"	f	class:Fwk::HashMap
newMember	fwk/HashMap.h	/^   void newMember( const Ptr<T>& t ) {$/;"	f	class:Fwk::HashMap
newMember	fwk/HashMap.h	/^   void newMember( const Ptr<T>& t, U32 hashVal ) {$/;"	f	class:Fwk::HashMap
newMember	fwk/HashMap.h	/^   void newMember( const T * t ) { memberIs( const_cast<T *>(t) ); }$/;"	f	class:Fwk::HashMap
newMember	fwk/LinkedList.h	/^      void newMember( T * newMember ) {$/;"	f	class:Fwk::LinkedList::LlIterator
newMember	fwk/LinkedList.h	/^    void newMember( T * _newMember ) {$/;"	f	class:Fwk::LinkedList
newMember	fwk/LinkedList.h	/^    void newMember( const typename T::Ptr& _newMember ) {$/;"	f	class:Fwk::LinkedList
newMember	fwk/LinkedQueue.h	/^      void newMember( T * newMember ) {$/;"	f	class:Fwk::LinkedQueue::Iterator
newMember	fwk/LinkedQueue.h	/^   void newMember( T * _newMember ) {$/;"	f	class:Fwk::LinkedQueue
newMember	fwk/LinkedQueue.h	/^   void newMember( const Ptr<T>& _newMember ) {$/;"	f	class:Fwk::LinkedQueue
newMember	fwk/ListRaw.h	/^      void newMember( T * newMember ) {$/;"	f	class:Fwk::ListRaw::LrIterator
newMember	fwk/ListRaw.h	/^    void newMember( T * newMember ) {$/;"	f	class:Fwk::ListRaw
newMember	fwk/ListRaw.h	/^    void newMember( const typename T::Ptr& newMember ) {$/;"	f	class:Fwk::ListRaw
newMemberThruIterator	fwk/LinkedList.h	/^   virtual void newMemberThruIterator( T * prevMember, T * newMember ) {}$/;"	f	class:Fwk::LinkedList
newPtr	fwk/LinkedList.h	/^      void newPtr( T * newMember ) {$/;"	f	class:Fwk::LinkedList::LlIterator
newPtr	fwk/LinkedQueue.h	/^      void newPtr( T * newMember ) {$/;"	f	class:Fwk::LinkedQueue::Iterator
newPtr	fwk/ListRaw.h	/^      void newPtr( T * newMember ) {$/;"	f	class:Fwk::ListRaw::LrIterator
newRef	fwk/PtrInterface.h	/^PtrInterface<T>::newRef() const {$/;"	f	class:Fwk::PtrInterface
nextAttributeNumber__	fwk/BaseNotifiee.h	/^     nextAttributeNumber__,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
nextAttributeNumber__	fwk/PtrInterface.h	/^      nextAttributeNumber__ = 1$/;"	e	enum:Fwk::PtrInterface::Attribute
nextSlot	mazewar.h	/^  ActionSlot nextSlot;$/;"	m	class:MazewarInstance
nlpo2	fwk/HashMap.h	/^inline int nlpo2( unsigned int x )$/;"	f	namespace:Fwk
noException_	fwk/Exception.h	/^      noException_ = 0,$/;"	e	enum:Fwk::Exception::Id
noImplementationException_	fwk/Exception.h	/^      noImplementationException_ = 14,$/;"	e	enum:Fwk::Exception::Id
noParentException_	fwk/Exception.h	/^      noParentException_ = 27,$/;"	e	enum:Fwk::Exception::Id
normalArrows	display.h	/^static BitCell normalArrows[NDIRECTION] = {$/;"	v
notificationAttribute	fwk/BaseNotifiee.h	/^   AttributeId notificationAttribute() const { $/;"	f	class:Fwk::RootNotifiee
notificationAttribute	fwk/BaseNotifiee.h	/^   void notificationAttribute(AttributeId _notificationAttribute ) {$/;"	f	class:Fwk::RootNotifiee
notificationAttribute_	fwk/BaseNotifiee.h	/^   AttributeId notificationAttribute_;$/;"	m	class:Fwk::RootNotifiee
notificationAttribute__	fwk/BaseNotifiee.h	/^     notificationAttribute__ = 9,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
notificationException__	fwk/BaseNotifiee.h	/^     notificationException__ = 8,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
nullNotification_	fwk/BaseNotifiee.h	/^     nullNotification_ = 0,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
offset	winsys.cpp	/^#define offset(/;"	d	file:
offset	winsys.cpp	/^#undef offset$/;"	d	file:
onAttribute	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onAttribute( AttributeId ) {}$/;"	f	class:Fwk::RootNotifiee
onCollectionNotification	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onCollectionNotification( String ) {}$/;"	f	class:Fwk::RootNotifiee
onDelete	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onDelete( ) {}$/;"	f	class:Fwk::RootNotifiee
onDeleteMemberNotFound	fwk/LinkedQueue.h	/^   virtual void onDeleteMemberNotFound( T * ) {}$/;"	f	class:Fwk::LinkedQueue
onNotification	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onNotification() {}$/;"	f	class:Fwk::RootNotifiee
onNotificationException	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onNotificationException( AttributeId ) { $/;"	f	class:Fwk::RootNotifiee
onNotificationException	fwk/BaseNotifiee.cpp	/^void RootNotifiee::onNotificationException() {}$/;"	f	class:Fwk::RootNotifiee
onZeroReferences	fwk/PtrInterface.h	/^    virtual void onZeroReferences() { delete this; }$/;"	f	class:Fwk::PtrInterface
one	winsys.cpp	/^int one = 1;$/;"	v
opTable	winsys.cpp	/^static XrmOptionDescRec opTable[] = {$/;"	v	file:
operator !=	Nominal.h	/^  bool operator!=(const Nominal<UnitType, RepType> &v) const {$/;"	f	class:Nominal
operator !=	fwk/Array.h	/^   bool operator!=( Array< T, N, K > const & other ) const { return !(*this == other); } $/;"	f	class:Fwk::Array
operator !=	fwk/BaseCollection.h	/^   bool operator!=(const BaseIteratorConst& mp ) const {$/;"	f	class:Fwk::BaseIteratorConst
operator !=	fwk/HashMap.h	/^   bool operator!=( Self const & v ) const {$/;"	f	class:Fwk::HashMap
operator *	fwk/Array.h	/^      T & operator *() { return * const_cast<T *>( space_ ); }$/;"	f	class:Fwk::Array::Iterator
operator *	fwk/Array.h	/^      T const & operator*() const { return *ptr(); }$/;"	f	class:Fwk::Array::IteratorConst
operator *	fwk/Array.h	/^   T & operator *() { return * const_cast<T *>( space_ ); }$/;"	f	class:Fwk::ArrayIterator
operator *	fwk/Array.h	/^   T const & operator*() const { return *ptr(); }$/;"	f	class:Fwk::ArrayIteratorConst
operator *	fwk/HashMap.h	/^      Fwk::Ptr<DT const> operator*() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
operator *	fwk/HashMap.h	/^      Fwk::Ptr<DT> operator*() { return _ptr(); }$/;"	f	class:Fwk::HashMap::DerIterator
operator *	fwk/HashMap.h	/^      T * operator*() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DIterator
operator *	fwk/HashMap.h	/^      T const * operator*() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DIteratorConst
operator *	fwk/HashMap.h	/^      V operator*() const { return _ptr()->fwkValue(); }$/;"	f	class:Fwk::HashMap::Iterator
operator *	fwk/HashMap.h	/^      Vconst operator*() const { return _ptr()->fwkValue(); }$/;"	f	class:Fwk::HashMap::IteratorConst
operator *	fwk/LinkedQueue.h	/^      V operator*() const { $/;"	f	class:Fwk::LinkedQueue::IteratorConst
operator *	fwk/LinkedQueue.h	/^      V operator*() const { return _ptr()->fwkValue(); }$/;"	f	class:Fwk::LinkedQueue::Iterator
operator +	Nominal.h	/^  operator+(const Ordinal<UnitType, RepType> &other) {$/;"	f	class:Ordinal
operator ++	Nominal.h	/^  const Ordinal<UnitType, RepType> &operator++() {$/;"	f	class:Ordinal
operator ++	fwk/Array.h	/^      Iterator & operator++() {$/;"	f	class:Fwk::Array::Iterator
operator ++	fwk/Array.h	/^   ArrayIterator & operator++() { this->ArrayIteratorConst<T,K>::operator++(); return *this; }$/;"	f	class:Fwk::ArrayIterator
operator ++	fwk/BaseCollection.h	/^      StrepIterator& operator++() {$/;"	f	class:Fwk::BaseCollection::StrepIterator
operator ++	fwk/HashMap.h	/^      DIteratorConst const & operator++() {$/;"	f	class:Fwk::HashMap::DIteratorConst
operator ++	fwk/HashMap.h	/^      DerIteratorConst const & operator++() {$/;"	f	class:Fwk::HashMap::DerIteratorConst
operator ++	fwk/HashMap.h	/^      IteratorConst const & operator++() {$/;"	f	class:Fwk::HashMap::IteratorConst
operator ++	fwk/LinkedList.h	/^       ConstLlIterator& operator++() {$/;"	f	class:Fwk::LinkedList::ConstLlIterator
operator ++	fwk/LinkedList.h	/^       const LlIterator& operator++() {$/;"	f	class:Fwk::LinkedList::LlIterator
operator ++	fwk/LinkedQueue.h	/^      Iterator& operator++() {$/;"	f	class:Fwk::LinkedQueue::Iterator
operator ++	fwk/LinkedQueue.h	/^      IteratorConst& operator++() {$/;"	f	class:Fwk::LinkedQueue::IteratorConst
operator ++	fwk/ListRaw.h	/^       LrIterator& operator++() {$/;"	f	class:Fwk::ListRaw::LrIterator
operator ++	fwk/ListRaw.h	/^       LrIteratorConst& operator++() {$/;"	f	class:Fwk::ListRaw::LrIteratorConst
operator ->	fwk/HashMap.h	/^      DT * operator->() const { return const_cast<DT * >(_ptr()->fwkPtr()); }$/;"	f	class:Fwk::HashMap::DerIterator
operator ->	fwk/HashMap.h	/^      DT const * operator->() const { return _ptr()->fwkPtr(); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
operator ->	fwk/HashMap.h	/^      P * operator->() const { return const_cast< P * >( _ptr()->fwkPtr() ); }$/;"	f	class:Fwk::HashMap::Iterator
operator ->	fwk/HashMap.h	/^      P const * operator->() const { return _ptr()->fwkPtr(); }$/;"	f	class:Fwk::HashMap::IteratorConst
operator ->	fwk/HashMap.h	/^      T * operator->() const { return const_cast<T *>( _ptr()); }$/;"	f	class:Fwk::HashMap::DIterator
operator ->	fwk/HashMap.h	/^      T const * operator->() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DIteratorConst
operator ->	fwk/LinkedList.h	/^       TT * operator->() const { $/;"	f	class:Fwk::LinkedList::LlIterator
operator ->	fwk/LinkedList.h	/^       const TT * operator->() const { return BaseIteratorConst<TT>::ptr(); }$/;"	f	class:Fwk::LinkedList::ConstLlIterator
operator ->	fwk/LinkedQueue.h	/^      P * operator->() const { return const_cast< P * >( _ptr()->fwkPtr() ); }$/;"	f	class:Fwk::LinkedQueue::Iterator
operator ->	fwk/LinkedQueue.h	/^      P const * operator->() const { return _ptr()->fwkPtr(); }$/;"	f	class:Fwk::LinkedQueue::IteratorConst
operator ->	fwk/ListRaw.h	/^       T * operator->() { return const_cast<T *>(ptr()); }$/;"	f	class:Fwk::ListRaw::LrIterator
operator ->	fwk/Ptr.h	/^    T * operator->() { return (T *) value_; }$/;"	f	class:Fwk::Ptr
operator ->	fwk/Ptr.h	/^    const T * operator->() const { return value_; }$/;"	f	class:Fwk::Ptr
operator /	Nominal.h	/^  operator\/(const Ordinal<UnitType, RepType> &other) {$/;"	f	class:Ordinal
operator <	Nominal.h	/^  bool operator<(const Ordinal<UnitType, RepType> &v) const {$/;"	f	class:Ordinal
operator <<	fwk/String.h	/^   inline StringBuf & operator<<( const T & t ) {$/;"	f	class:Fwk::StringBuf
operator <=	Nominal.h	/^  bool operator<=(const Ordinal<UnitType, RepType> &v) const {$/;"	f	class:Ordinal
operator =	Nominal.h	/^  operator=(const Nominal<UnitType, RepType> &v) {$/;"	f	class:Nominal
operator =	fwk/BaseCollection.h	/^      StrepIterator const & operator=( StrepIterator const & other ) {$/;"	f	class:Fwk::BaseCollection::StrepIterator
operator =	fwk/BaseCollection.h	/^   BaseIteratorConst<T>& operator=( const BaseIteratorConst<T>& mp ) {$/;"	f	class:Fwk::BaseIteratorConst
operator =	fwk/Ptr.h	/^Ptr<T>::operator=( Ptr<T>& mp ) {$/;"	f	class:Fwk::Ptr
operator =	fwk/Ptr.h	/^Ptr<T>::operator=( const Ptr<T>& mp ) {$/;"	f	class:Fwk::Ptr
operator ==	Nominal.h	/^  bool operator==(const Nominal<UnitType, RepType> &v) const {$/;"	f	class:Nominal
operator ==	fwk/Array.h	/^   bool operator==( Array< T, N, K > const & other ) const {$/;"	f	class:Fwk::Array
operator ==	fwk/BaseCollection.h	/^   bool operator==( const BaseIteratorConst& mp ) const { $/;"	f	class:Fwk::BaseIteratorConst
operator ==	fwk/HashMap.h	/^   bool operator==( Self const & v ) const {$/;"	f	class:Fwk::HashMap
operator ==	fwk/Ptr.h	/^    bool operator==( const Ptr<T>& mp ) const { return mp.value_ == value_; }$/;"	f	class:Fwk::Ptr
operator >	Nominal.h	/^  bool operator>(const Ordinal<UnitType, RepType> &v) const {$/;"	f	class:Ordinal
operator >=	Nominal.h	/^  bool operator>=(const Ordinal<UnitType, RepType> &v) const {$/;"	f	class:Ordinal
operator IterDeleter *	fwk/HashMap.h	/^      operator IterDeleter * () {  return _ptr() ? (IterDeleter*) this : 0;  }$/;"	f	class:Fwk::HashMap::DIterator
operator IterDeleter *	fwk/HashMap.h	/^      operator IterDeleter * () {  return _ptr() ? (IterDeleter*) this : 0;  }$/;"	f	class:Fwk::HashMap::DerIterator
operator IterDeleter *	fwk/HashMap.h	/^      operator IterDeleter * () {  return _ptr() ? (IterDeleter*) this : 0;  }$/;"	f	class:Fwk::HashMap::Iterator
operator IterDeleter *	fwk/LinkedQueue.h	/^      operator IterDeleter * () {  return _ptr() ? (IterDeleter*) this : 0;  }$/;"	f	class:Fwk::LinkedQueue::Iterator
operator IterDeleter *	fwk/ListRaw.h	/^      operator IterDeleter * () {  return ptr() ? (IterDeleter*) this : 0;  }$/;"	f	class:Fwk::ListRaw::LrIterator
operator LlIterator<OtherType>	fwk/LinkedList.h	/^        operator LlIterator<OtherType>() const {$/;"	f	class:Fwk::LinkedList::LlIterator
operator Ptr<OtherType>	fwk/Ptr.h	/^    operator Ptr<OtherType>() const {$/;"	f	class:Fwk::Ptr
operator String	fwk/String.h	/^   operator String() const { return ss_.str(); }$/;"	f	class:Fwk::StringBuf
operator []	fwk/Array.h	/^   T & operator[]( unsigned n ) { return array_[ n ]; }$/;"	f	class:Fwk::Array
operator []	fwk/Array.h	/^   T const & operator[]( unsigned n ) const { return array_[ n ]; }$/;"	f	class:Fwk::Array
operator []	fwk/HashMap.h	/^   T * operator[]( const Key& k ) {$/;"	f	class:Fwk::HashMap
operator []	fwk/HashMap.h	/^   T const * operator[]( const Key& k ) const {$/;"	f	class:Fwk::HashMap
operator []	fwk/LinkedList.h	/^    T const * operator[]( T const * m ) const { $/;"	f	class:Fwk::LinkedList
operator []	fwk/LinkedList.h	/^   T * operator[]( T const * m ) {$/;"	f	class:Fwk::LinkedList
operator []	fwk/LinkedList.h	/^   T * operator[]( const typename T::Ptr& m ) {$/;"	f	class:Fwk::LinkedList
operator []	fwk/LinkedList.h	/^   T const * operator[]( const typename T::Ptr& m ) const {$/;"	f	class:Fwk::LinkedList
operator []	fwk/LinkedQueue.h	/^   T * operator[]( T const * m ) {$/;"	f	class:Fwk::LinkedQueue
operator []	fwk/LinkedQueue.h	/^   T * operator[]( const typename T::Ptr& m ) { return operator[](m.ptr()); }$/;"	f	class:Fwk::LinkedQueue
operator []	fwk/LinkedQueue.h	/^   T const * operator[]( T const * m ) const {$/;"	f	class:Fwk::LinkedQueue
operator []	fwk/LinkedQueue.h	/^   T const * operator[]( const typename T::Ptr& m ) const {$/;"	f	class:Fwk::LinkedQueue
operator bool	fwk/Ptr.h	/^    operator bool() const { return value_ ? 1 : 0; }$/;"	f	class:Fwk::Ptr
operator delete	fwk/HashMap.h	/^	 void operator delete( void * thisPtr ) {$/;"	f	struct:Fwk::HashMap::DIterator::IterDeleter
operator delete	fwk/HashMap.h	/^	 void operator delete( void * thisPtr ) {$/;"	f	struct:Fwk::HashMap::DerIterator::IterDeleter
operator delete	fwk/HashMap.h	/^	 void operator delete( void * thisPtr ) {$/;"	f	struct:Fwk::HashMap::Iterator::IterDeleter
operator delete	fwk/LinkedQueue.h	/^	 void operator delete( void * thisPtr ) {$/;"	f	struct:Fwk::LinkedQueue::Iterator::IterDeleter
operator delete	fwk/ListRaw.h	/^	 void operator delete( void * thisPtr ) {$/;"	f	struct:Fwk::ListRaw::LrIterator::IterDeleter
operator int BoolConversion::*	fwk/Array.h	/^      operator int BoolConversion::*() const {$/;"	f	class:Fwk::Array::IteratorConst
operator int BoolConversion::*	fwk/Array.h	/^   operator int BoolConversion::*() const {$/;"	f	class:Fwk::ArrayIteratorConst
operator int BoolConversion::*	fwk/BaseCollection.h	/^      operator int BoolConversion::*() const {$/;"	f	class:Fwk::BaseCollection::StrepIterator
operator int BoolConversion::*	fwk/BaseCollection.h	/^   operator int BoolConversion::*() const { return space_ ? &BoolConversion::x : NULL; }$/;"	f	class:Fwk::BaseIteratorConst
operator int PointerConversion::*	fwk/LinkedQueue.h	/^      operator int PointerConversion::*() const { $/;"	f	class:Fwk::LinkedQueue::Iterator
orphanAllMembers	fwk/BaseCollection.h	/^void orphanAllMembers( Collection & c ) {$/;"	f	namespace:Fwk
orphan__	fwk/BaseNotifiee.h	/^     orphan__ = 20,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
ownerId	mazewar.h	/^	uint32_t ownerId;			$/;"	m	struct:missileHit
p1	mazewar.h	/^typedef struct { XYpoint p1, p2; } XYpair;$/;"	m	struct:__anon3
p2	mazewar.h	/^typedef struct { XYpoint p1, p2; } XYpair;$/;"	m	struct:__anon3
packetInfo	mazewar.h	/^} packetInfo; $/;"	t	typeref:union:__anon8
parent__	fwk/BaseNotifiee.h	/^     parent__ = 16,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
peekLeft	toplevel.cpp	/^void peekLeft() {$/;"	f
peekRight	toplevel.cpp	/^void peekRight() {$/;"	f
peekStop	toplevel.cpp	/^void peekStop() {$/;"	f
peeking	mazewar.h	/^  inline bool peeking() const { return peeking_; }$/;"	f	class:MazewarInstance
peekingIs	mazewar.h	/^  void peekingIs(bool peeking) { this->peeking_ = peeking; }$/;"	f	class:MazewarInstance
peeking_	mazewar.h	/^  bool peeking_;$/;"	m	class:MazewarInstance
permissionException_	fwk/Exception.h	/^      permissionException_ = 13,$/;"	e	enum:Fwk::Exception::Id
play	toplevel.cpp	/^void play(void) {$/;"	f
playing	mazewar.h	/^  bool playing;$/;"	m	class:Rat
plotLine	display.cpp	/^static XYpair *plotLine(XYpair *p, bool two) {$/;"	f	file:
position	mazewar.h	/^	uint16_t position;$/;"	m	struct:born
position	mazewar.h	/^	uint16_t position;$/;"	m	struct:missileHit
position	mazewar.h	/^	uint16_t position;$/;"	m	struct:missileInfo
position	mazewar.h	/^	uint16_t position;$/;"	m	struct:missileProjection
position	mazewar.h	/^  uint16_t position;$/;"	m	struct:absoluteInfo
prevEdge3	display.cpp	/^static bool prevEdge3, prevEdge7; \/* plotter smarts *\/$/;"	v	file:
prevEdge7	display.cpp	/^static bool prevEdge3, prevEdge7; \/* plotter smarts *\/$/;"	v	file:
prev_	fwk/LinkedList.h	/^       Ptr<TT> prev_;$/;"	m	class:Fwk::LinkedList::LlIterator
prev_	fwk/ListRaw.h	/^       Ptr<T> prev_;$/;"	m	class:Fwk::ListRaw::LrIterator
privatePtrIs	fwk/Array.h	/^      void privatePtrIs( T const * p ) { ptrIs( p ); }$/;"	f	class:Fwk::Array::IteratorConst
privatePtrIs	fwk/Array.h	/^   void privatePtrIs( T const * p ) { ptrIs( p ); }$/;"	f	class:Fwk::ArrayIteratorConst
processPacket	toplevel.cpp	/^void processPacket(MWEvent *eventPacket) {$/;"	f
progName	winsys.cpp	/^static char *progName;$/;"	v	file:
ptr	fwk/Array.h	/^      T const * ptr() const { return BaseIteratorConst<T>::ptr(); }$/;"	f	class:Fwk::Array::IteratorConst
ptr	fwk/Array.h	/^   T const * ptr() const { return BaseIteratorConst<T>::ptr(); }$/;"	f	class:Fwk::ArrayIteratorConst
ptr	fwk/BaseCollection.h	/^   T const * ptr() const { return (T const *) space_; }$/;"	f	class:Fwk::BaseIteratorConst
ptr	fwk/HashMap.h	/^      DT * ptr() const { return const_cast<DT *>(_ptr()); }$/;"	f	class:Fwk::HashMap::DerIterator
ptr	fwk/HashMap.h	/^      DT const * ptr() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DerIteratorConst
ptr	fwk/HashMap.h	/^      P * ptr() const { return const_cast< P * >( _ptr()->fwkPtr() ); }$/;"	f	class:Fwk::HashMap::Iterator
ptr	fwk/HashMap.h	/^      P const * ptr() const { return _ptr()->fwkPtr(); }$/;"	f	class:Fwk::HashMap::IteratorConst
ptr	fwk/HashMap.h	/^      T * ptr() const { return const_cast<T *>( _ptr()); }$/;"	f	class:Fwk::HashMap::DIterator
ptr	fwk/HashMap.h	/^      T const * ptr() const { return _ptr(); }$/;"	f	class:Fwk::HashMap::DIteratorConst
ptr	fwk/LinkedList.h	/^       TT * ptr() { return const_cast< TT * >( ConstLlIterator<TT>::ptr() ); }$/;"	f	class:Fwk::LinkedList::LlIterator
ptr	fwk/LinkedList.h	/^       const TT * ptr() const { return BaseIteratorConst<TT>::ptr(); }$/;"	f	class:Fwk::LinkedList::ConstLlIterator
ptr	fwk/LinkedQueue.h	/^      P * ptr() const { return const_cast< P * >( _ptr()->fwkPtr() ); }$/;"	f	class:Fwk::LinkedQueue::Iterator
ptr	fwk/LinkedQueue.h	/^      P const * ptr() const { return _ptr()->fwkPtr(); }$/;"	f	class:Fwk::LinkedQueue::IteratorConst
ptr	fwk/ListRaw.h	/^       T * ptr() { return const_cast<T *>(BaseIteratorConst<T>::ptr()); }$/;"	f	class:Fwk::ListRaw::LrIterator
ptr	fwk/Ptr.h	/^    T * ptr() const { return (T *) value_; }$/;"	f	class:Fwk::Ptr
ptrIs	fwk/BaseCollection.h	/^   void ptrIs( T const * t ) { $/;"	f	class:Fwk::BaseIteratorConst
quit	toplevel.cpp	/^void quit(int sig) {$/;"	f
r1Delta	display.cpp	/^static XY r1Delta[NDIR] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};$/;"	v	file:
r2Delta	display.cpp	/^static XY r2Delta[NDIR] = {{1, 1}, {-1, -1}, {-1, 1}, {1, -1}};$/;"	v	file:
rangeException_	fwk/Exception.h	/^      rangeException_ = 7,$/;"	e	enum:Fwk::Exception::Id
rat	mazewar.h	/^	inline Rat rat(RatIndexType num) const { return mazeRats_[num.value()]; }$/;"	f	class:MazewarInstance
ratBits	display.h	/^unsigned short ratBits[] = {$/;"	v
ratBits_height	display.h	/^#define ratBits_height /;"	d
ratBits_width	display.h	/^#define ratBits_width /;"	d
ratCursor	winsys.cpp	/^static Cursor ratCursor, deadRatCursor, hourGlassCursor;$/;"	v	file:
ratIs	mazewar.h	/^	void ratIs(Rat rat, RatIndexType num) { this->mazeRats_[num.value()] = rat; }$/;"	f	class:MazewarInstance
ratStates	toplevel.cpp	/^void ratStates() {$/;"	f
ratsBitmap	winsys.cpp	/^Pixmap ratsBitmap; \/* the rats *\/$/;"	v
ratsImage	winsys.cpp	/^XImage *ratsImage; \/* the rats *\/$/;"	v
ref_	fwk/PtrInterface.h	/^    long unsigned ref_;$/;"	m	class:Fwk::PtrInterface
references	fwk/PtrInterface.h	/^    unsigned long references() const { return ref_; }$/;"	f	class:Fwk::PtrInterface
referencesDec	fwk/PtrInterface.h	/^PtrInterface<T>::referencesDec( U32 dec ) const {$/;"	f	class:Fwk::PtrInterface
references__	fwk/BaseNotifiee.h	/^     references__ = 11,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
relativeTokens	display.h	/^static TokenId relativeTokens[NDIRECTION][NDIRECTION] = {$/;"	v
repaintIcon	winsys.cpp	/^static void repaintIcon() {$/;"	f	file:
repaintWindow	winsys.cpp	/^static void repaintWindow(void) {$/;"	f	file:
resizeDowns	fwk/HashMap.h	/^   U32 resizeDowns() const {$/;"	f	class:Fwk::HashMap
resizeDowns_	fwk/HashMap.h	/^   U32 resizeDowns_;$/;"	m	class:Fwk::HashMap
resizeUps	fwk/HashMap.h	/^   U32 resizeUps() const {$/;"	f	class:Fwk::HashMap
resizeUps_	fwk/HashMap.h	/^   U32 resizeUps_;$/;"	m	class:Fwk::HashMap
resolveHost	init.cpp	/^Sockaddr *resolveHost(register char *name) {$/;"	f
resources	winsys.cpp	/^static XtResource resources[] = {$/;"	v	file:
rhash	fwk/HashMap.h	/^inline U32 rhash( Key const & k ) {$/;"	f	namespace:Fwk
rightTurn	toplevel.cpp	/^void rightTurn(void) {$/;"	f
robotic	winsys.cpp	/^  bool robotic;$/;"	m	struct:_resources	file:
rpcConnectionException_	fwk/Exception.h	/^      rpcConnectionException_ = 16,$/;"	e	enum:Fwk::Exception::Id
rpcException_	fwk/Exception.h	/^      rpcException_ = 15,$/;"	e	enum:Fwk::Exception::Id
rshift	fwk/HashMap.h	/^   U32 rshift() const { return __builtin_clzl( buckets_ ) + 1; }$/;"	f	class:Fwk::HashMap
rstate	init.cpp	/^static char rstate[32];$/;"	v	file:
score	mazewar.h	/^	Score score;$/;"	m	class:Rat
score	mazewar.h	/^	uint32_t score;$/;"	m	struct:absoluteInfo
score	mazewar.h	/^  inline Score score() const { return score_; }$/;"	f	class:MazewarInstance
scoreFont	winsys.cpp	/^  Font scoreFont;    \/* font for printing scores *\/$/;"	m	struct:_resources	file:
scoreFontInfo	winsys.cpp	/^XFontStruct *scoreFontInfo;$/;"	v
scoreIs	mazewar.h	/^  void scoreIs(Score score) { this->score_ = score; }$/;"	f	class:MazewarInstance
score_	mazewar.h	/^  Score score_;$/;"	m	class:MazewarInstance
screen	winsys.cpp	/^int screen;                          \/* screen on the display *\/$/;"	v
sendPacketToPlayer	toplevel.cpp	/^void sendPacketToPlayer(RatId ratId, Sockaddr Addr, short packType, packetInfo info) {$/;"	f
setRandom	init.cpp	/^void setRandom(void) {$/;"	f
shoot	toplevel.cpp	/^void shoot() { $/;"	f
showMe	display.cpp	/^void showMe(Loc x_loc, Loc y_loc, Direction dir) {$/;"	f
showMissile	display.cpp	/^void showMissile(Loc x_loc, Loc y_loc, Direction dir, Loc prev_x, Loc prev_y,$/;"	f
size	fwk/HashMap.h	/^   U32 size() const { return 1; }$/;"	f	class:Fwk::HashMap
slowIncrs	fwk/HashMap.h	/^      U32 slowIncrs() const { return 0; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
slowIncrs	fwk/HashMap.h	/^      U32 slowIncrs() const { return slowIncrs_; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
slowIncrsIs	fwk/HashMap.h	/^      void slowIncrsIs( U32 c ) { slowIncrs_ = c; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
slowIncrsIs	fwk/HashMap.h	/^      void slowIncrsIs( U32 c ) {}$/;"	f	class:Fwk::HashMap::IteratorConstBase
slowIncrs_	fwk/HashMap.h	/^      U32 slowIncrs_;$/;"	m	class:Fwk::HashMap::IteratorConstBase
sourceId	mazewar.h	/^	uint32_t sourceId;$/;"	m	struct:SIACK
sourceId	mazewar.h	/^	uint32_t sourceId;$/;"	m	struct:eventACK
sourceId	mazewar.h	/^  uint32_t sourceId;$/;"	m	struct:event
sourceId	mazewar.h	/^  uint32_t sourceId;$/;"	m	struct:heartbeat
sourceId	mazewar.h	/^  uint32_t sourceId;$/;"	m	struct:heartbeatACK
space	fwk/BaseCollection.h	/^   void const * space( StrepIterator const & it  ) const { return it.space_; }$/;"	f	class:Fwk::BaseCollection
space_	fwk/BaseCollection.h	/^      void const * space_;$/;"	m	class:Fwk::BaseCollection::StrepIterator
speed	mazewar.h	/^	uint8_t speed;$/;"	m	struct:movement
ss_	fwk/String.h	/^   std::stringstream ss_;$/;"	m	class:Fwk::StringBuf
storageException_	fwk/Exception.h	/^      storageException_ = 9,$/;"	e	enum:Fwk::Exception::Id
strep	fwk/BaseCollection.h	/^      String strep() const { $/;"	f	class:Fwk::BaseCollection::StrepIterator
syncMode__	fwk/BaseNotifiee.h	/^     syncMode__ = 17,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
tacKeyForNotificationException	fwk/BaseNotifiee.h	/^   AttributeId tacKeyForNotificationException() const {$/;"	f	class:Fwk::RootNotifiee
tacKeyForNotificationExceptionIs	fwk/BaseNotifiee.h	/^   void tacKeyForNotificationExceptionIs( AttributeId aid ){$/;"	f	class:Fwk::RootNotifiee
tacKeyForNotificationException_	fwk/BaseNotifiee.h	/^   AttributeId tacKeyForNotificationException_;$/;"	m	class:Fwk::RootNotifiee
tacNextAttributeId__	fwk/BaseNotifiee.h	/^     tacNextAttributeId__ = nextAttributeNumber__,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
tacNotificationExceptionChanges	fwk/BaseNotifiee.h	/^   U8 tacNotificationExceptionChanges() const {$/;"	f	class:Fwk::RootNotifiee
tacNotificationExceptionChangesIs	fwk/BaseNotifiee.h	/^   void tacNotificationExceptionChangesIs( U8 tnec ) {$/;"	f	class:Fwk::RootNotifiee
tacNotificationExceptionChanges_	fwk/BaseNotifiee.h	/^   U8 tacNotificationExceptionChanges_;$/;"	m	class:Fwk::RootNotifiee
tail	fwk/LinkedQueue.h	/^   T * tail() const { return tail_; }$/;"	f	class:Fwk::LinkedQueue
tail_	fwk/LinkedList.h	/^   T * tail_; \/\/ depend on the head\/next reference to entry, not tail$/;"	m	class:Fwk::LinkedList
tail_	fwk/LinkedQueue.h	/^   T * tail_; \/\/ depend on the head\/next reference to packet, not tail$/;"	m	class:Fwk::LinkedQueue
tail_	fwk/ListRaw.h	/^    T * tail_;$/;"	m	class:Fwk::ListRaw
theSocket	mazewar.h	/^  inline int theSocket() const { return theSocket_; }$/;"	f	class:MazewarInstance
theSocketIs	mazewar.h	/^  void theSocketIs(int theSocket) { this->theSocket_ = theSocket; }$/;"	f	class:MazewarInstance
theSocket_	mazewar.h	/^  int theSocket_;$/;"	m	class:MazewarInstance
this__	fwk/BaseNotifiee.h	/^     this__ = 1,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
thread_local	fwk/Types.h	/^#define thread_local /;"	d
time_interval	winsys.cpp	/^  int time_interval; \/* in milliseconds *\/$/;"	m	struct:_resources	file:
timeoutException_	fwk/Exception.h	/^      timeoutException_ = 10,$/;"	e	enum:Fwk::Exception::Id
tokenId	mazewar.h	/^  TokenId tokenId;$/;"	m	class:RatAppearance
type	mazewar.h	/^  uint8_t type;$/;"	m	struct:event
type	mazewar.h	/^  unsigned char type;$/;"	m	struct:__anon6
typeName	fwk/Types.h	/^String typeName( T const & t ) {$/;"	f	namespace:Fwk
typeName	fwk/Types.h	/^String typeName() {$/;"	f	namespace:Fwk
uncommit	mazewar.h	/^	uncommittedAction uncommit[MAX_UNCOMMITED];$/;"	m	struct:eventACK
unknownArgException_	fwk/Exception.h	/^      unknownArgException_ = 5,$/;"	e	enum:Fwk::Exception::Id
unknownAttrException_	fwk/Exception.h	/^      unknownAttrException_ = 3,$/;"	e	enum:Fwk::Exception::Id
unknownDelimiterException_	fwk/Exception.h	/^      unknownDelimiterException_ = 4,$/;"	e	enum:Fwk::Exception::Id
unknownEntityIdException_	fwk/Exception.h	/^      unknownEntityIdException_ = 20,$/;"	e	enum:Fwk::Exception::Id
unknownException_	fwk/Exception.h	/^      unknownException_ = 1,$/;"	e	enum:Fwk::Exception::Id
unknownTypeException_	fwk/Exception.h	/^      unknownTypeException_ = 2,$/;"	e	enum:Fwk::Exception::Id
unlikely	fwk/Types.h	/^#define unlikely(/;"	d
updateView	toplevel.cpp	/^static bool updateView; \/* true if update needed *\/$/;"	v	file:
valid	fwk/LinkedQueue.h	/^         int valid;$/;"	m	struct:Fwk::LinkedQueue::Iterator::PointerConversion
value	Nominal.h	/^  RepType value() const { return value_; }$/;"	f	class:Nominal
value_	Nominal.h	/^  RepType value_;$/;"	m	class:Nominal
value_	fwk/Ptr.h	/^    T *value_;$/;"	m	class:Fwk::Ptr
version	fwk/HashMap.h	/^      U32 version() const{ return data0_; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
version	fwk/HashMap.h	/^   U32 version() const { return version_; }$/;"	f	class:Fwk::HashMap
version	fwk/LinkedList.h	/^    U32 version() const { return version_; }$/;"	f	class:Fwk::LinkedList
version	fwk/LinkedQueue.h	/^   U32 version() const { return version_; }$/;"	f	class:Fwk::LinkedQueue
version	fwk/ListRaw.h	/^    U32 version() const { return version_; }$/;"	f	class:Fwk::ListRaw
versionIs	fwk/HashMap.h	/^      void versionIs(U32 v) { data0_ = v; }$/;"	f	class:Fwk::HashMap::IteratorConstBase
version_	fwk/HashMap.h	/^   U32 version_;$/;"	m	class:Fwk::HashMap
version_	fwk/LinkedList.h	/^   U32 version_;$/;"	m	class:Fwk::LinkedList
version_	fwk/LinkedQueue.h	/^   U32 version_;$/;"	m	class:Fwk::LinkedQueue
version_	fwk/ListRaw.h	/^       U32 version_;$/;"	m	class:Fwk::ListRaw::LrIterator
version_	fwk/ListRaw.h	/^    U32 version_;$/;"	m	class:Fwk::ListRaw
version__	fwk/BaseNotifiee.h	/^     version__ = 3,$/;"	e	enum:Fwk::RootNotifiee::AttributeId
viewTable	display.h	/^static XYpair viewTable[] = {$/;"	v
visible	mazewar.h	/^  bool visible;$/;"	m	class:RatAppearance
what	Exception.h	/^  string what() const { return what_; }$/;"	f	class:Exception
what	fwk/Exception.h	/^   String what() const { return what_; }$/;"	f	class:Fwk::Exception
what_	Exception.h	/^  string what_;$/;"	m	class:Exception
what_	fwk/Exception.h	/^   String what_;$/;"	m	class:Fwk::Exception
x	fwk/BaseCollection.h	/^      struct BoolConversion { int x; }; \/\/ better than operator bool$/;"	m	struct:Fwk::BaseCollection::StrepIterator::BoolConversion
x	mazewar.h	/^								Loc x, y;$/;"	m	struct:Missile
x	mazewar.h	/^  Loc x, y;$/;"	m	class:Rat
x	mazewar.h	/^  Loc x, y;$/;"	m	class:RatAppearance
x	mazewar.h	/^typedef struct { short x, y; } XYpoint;$/;"	m	struct:__anon2
xCreateBitmapFromBitCell	winsys.cpp	/^static Pixmap xCreateBitmapFromBitCell(Display *display, Drawable d, char *data,$/;"	f	file:
xPeek	mazewar.h	/^  inline Loc xPeek() const { return xPeek_; }$/;"	f	class:MazewarInstance
xPeekIs	mazewar.h	/^  void xPeekIs(Loc xPeek) { this->xPeek_ = xPeek; }$/;"	f	class:MazewarInstance
xPeek_	mazewar.h	/^  Loc xPeek_;$/;"	m	class:MazewarInstance
xcor	mazewar.h	/^typedef struct { short xcor, ycor; } XY;$/;"	m	struct:__anon4
xloc	mazewar.h	/^  inline Loc xloc() const { return xloc_; }$/;"	f	class:MazewarInstance
xlocIs	mazewar.h	/^  void xlocIs(Loc xloc) { this->xloc_ = xloc; }$/;"	f	class:MazewarInstance
xloc_	mazewar.h	/^  Loc xloc_;$/;"	m	class:MazewarInstance
xorGC	winsys.cpp	/^GC copyGC, xorGC;                    \/* graphics contexts for window *\/$/;"	v
y	mazewar.h	/^								Loc x, y;$/;"	m	struct:Missile
y	mazewar.h	/^  Loc x, y;$/;"	m	class:Rat
y	mazewar.h	/^  Loc x, y;$/;"	m	class:RatAppearance
y	mazewar.h	/^typedef struct { short x, y; } XYpoint;$/;"	m	struct:__anon2
yPeek	mazewar.h	/^  inline Loc yPeek() const { return yPeek_; }$/;"	f	class:MazewarInstance
yPeekIs	mazewar.h	/^  void yPeekIs(Loc yPeek) { this->yPeek_ = yPeek; }$/;"	f	class:MazewarInstance
yPeek_	mazewar.h	/^  Loc yPeek_;$/;"	m	class:MazewarInstance
ycor	mazewar.h	/^typedef struct { short xcor, ycor; } XY;$/;"	m	struct:__anon4
yloc	mazewar.h	/^  inline Loc yloc() const { return yloc_; }$/;"	f	class:MazewarInstance
ylocIs	mazewar.h	/^  void ylocIs(Loc yloc) { this->yloc_ = yloc; }$/;"	f	class:MazewarInstance
yloc_	mazewar.h	/^  Loc yloc_;$/;"	m	class:MazewarInstance
zero	winsys.cpp	/^int zero = 0;$/;"	v
zeroIfTrue	fwk/Array.h	/^zeroIfTrue( False, void * ptr, size_t size ) {$/;"	f	namespace:Fwk
zeroIfTrue	fwk/Array.h	/^zeroIfTrue( True, void * ptr, size_t size ) {$/;"	f	namespace:Fwk
~AttributeNotSupportedException	Exception.h	/^  ~AttributeNotSupportedException(){};$/;"	f	class:AttributeNotSupportedException
~BaseCollection	fwk/BaseCollection.cpp	/^Fwk::BaseCollection::~BaseCollection() {$/;"	f	class:Fwk::BaseCollection
~EntityNotFoundException	Exception.h	/^  ~EntityNotFoundException(){};$/;"	f	class:EntityNotFoundException
~Exception	Exception.h	/^  virtual ~Exception(){};$/;"	f	class:Exception
~Exception	fwk/Exception.cpp	/^Fwk::Exception::~Exception() {$/;"	f	class:Fwk::Exception
~HashMap	fwk/HashMap.h	/^   virtual ~HashMap() {  \/\/ Deference all items in table and free buckets.$/;"	f	class:Fwk::HashMap
~IterDeleter	fwk/HashMap.h	/^	 ~IterDeleter() {}$/;"	f	struct:Fwk::HashMap::DIterator::IterDeleter
~IterDeleter	fwk/HashMap.h	/^	 ~IterDeleter() {}$/;"	f	struct:Fwk::HashMap::DerIterator::IterDeleter
~IterDeleter	fwk/HashMap.h	/^	 ~IterDeleter() {}$/;"	f	struct:Fwk::HashMap::Iterator::IterDeleter
~IterDeleter	fwk/LinkedQueue.h	/^	 ~IterDeleter() {}$/;"	f	struct:Fwk::LinkedQueue::Iterator::IterDeleter
~IterDeleter	fwk/ListRaw.h	/^	 ~IterDeleter() {}$/;"	f	struct:Fwk::ListRaw::LrIterator::IterDeleter
~LinkedList	fwk/LinkedList.h	/^    virtual ~LinkedList() { deleteAll(); }$/;"	f	class:Fwk::LinkedList
~LinkedQueue	fwk/LinkedQueue.h	/^   virtual ~LinkedQueue() { deleteAll(); }$/;"	f	class:Fwk::LinkedQueue
~ListRaw	fwk/ListRaw.h	/^   virtual ~ListRaw() { deleteAll(); }$/;"	f	class:Fwk::ListRaw
~NameInUseException	Exception.h	/^  ~NameInUseException(){};$/;"	f	class:NameInUseException
~NoImplementationException	Exception.h	/^  ~NoImplementationException(){};$/;"	f	class:NoImplementationException
~PermissionException	Exception.h	/^  ~PermissionException(){};$/;"	f	class:PermissionException
~Ptr	fwk/Ptr.h	/^Ptr<T>::~Ptr() {$/;"	f	class:Fwk::Ptr
~PtrInterface	fwk/PtrInterface.h	/^    virtual ~PtrInterface() {}$/;"	f	class:Fwk::PtrInterface
~RangeException	Exception.h	/^  ~RangeException(){};$/;"	f	class:RangeException
~StrepIterator	fwk/BaseCollection.h	/^      ~StrepIterator() { if( collection_ ) collection_->iteratorDelete( *this ); }$/;"	f	class:Fwk::BaseCollection::StrepIterator
